/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -a powermanagement_adaptor -c PowerManagementAdaptor com.lge.car.micom.powermanagement.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "powermanagement_adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class PowerManagementAdaptor
 */

PowerManagementAdaptor::PowerManagementAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

PowerManagementAdaptor::~PowerManagementAdaptor()
{
    // destructor
}

QByteArray PowerManagementAdaptor::LgeDBus_AskAutoTestWIPID()
{
    // handle method call com.lge.car.micom.powermanagement.LgeDBus_AskAutoTestWIPID
    QByteArray out0;
    QMetaObject::invokeMethod(parent(), "LgeDBus_AskAutoTestWIPID", Q_RETURN_ARG(QByteArray, out0));
    return out0;
}

QByteArray PowerManagementAdaptor::LgeDBus_AskMPModeInfo(const QByteArray &in0)
{
    // handle method call com.lge.car.micom.powermanagement.LgeDBus_AskMPModeInfo
    QByteArray out0;
    QMetaObject::invokeMethod(parent(), "LgeDBus_AskMPModeInfo", Q_RETURN_ARG(QByteArray, out0), Q_ARG(QByteArray, in0));
    return out0;
}

void PowerManagementAdaptor::LgeDBus_AutoTestWIPIDControl(const QByteArray &in0)
{
    // handle method call com.lge.car.micom.powermanagement.LgeDBus_AutoTestWIPIDControl
    QMetaObject::invokeMethod(parent(), "LgeDBus_AutoTestWIPIDControl", Q_ARG(QByteArray, in0));
}

void PowerManagementAdaptor::LgeDBus_BTPowerControl(uchar in0)
{
    // handle method call com.lge.car.micom.powermanagement.LgeDBus_BTPowerControl
    QMetaObject::invokeMethod(parent(), "LgeDBus_BTPowerControl", Q_ARG(uchar, in0));
}

void PowerManagementAdaptor::LgeDBus_HWCameraPowerControl(uchar in0)
{
    // handle method call com.lge.car.micom.powermanagement.LgeDBus_HWCameraPowerControl
    QMetaObject::invokeMethod(parent(), "LgeDBus_HWCameraPowerControl", Q_ARG(uchar, in0));
}

void PowerManagementAdaptor::LgeDBus_MPAutoModeTestMsg(const QByteArray &in0)
{
    // handle method call com.lge.car.micom.powermanagement.LgeDBus_MPAutoModeTestMsg
    QMetaObject::invokeMethod(parent(), "LgeDBus_MPAutoModeTestMsg", Q_ARG(QByteArray, in0));
}

void PowerManagementAdaptor::LgeDBus_MPAutoTestModeCtrl(const QByteArray &in0)
{
    // handle method call com.lge.car.micom.powermanagement.LgeDBus_MPAutoTestModeCtrl
    QMetaObject::invokeMethod(parent(), "LgeDBus_MPAutoTestModeCtrl", Q_ARG(QByteArray, in0));
}

void PowerManagementAdaptor::LgeDBus_MPAutoTestModeEvent(const QByteArray &in0)
{
    // handle method call com.lge.car.micom.powermanagement.LgeDBus_MPAutoTestModeEvent
    QMetaObject::invokeMethod(parent(), "LgeDBus_MPAutoTestModeEvent", Q_ARG(QByteArray, in0));
}

QByteArray PowerManagementAdaptor::LgeDBus_MPAutoTestModeRequest(const QByteArray &in0)
{
    // handle method call com.lge.car.micom.powermanagement.LgeDBus_MPAutoTestModeRequest
    QByteArray out0;
    QMetaObject::invokeMethod(parent(), "LgeDBus_MPAutoTestModeRequest", Q_RETURN_ARG(QByteArray, out0), Q_ARG(QByteArray, in0));
    return out0;
}

void PowerManagementAdaptor::LgeDBus_SetHardwarePowerKeyControl(uchar in0)
{
    // handle method call com.lge.car.micom.powermanagement.LgeDBus_SetHardwarePowerKeyControl
    QMetaObject::invokeMethod(parent(), "LgeDBus_SetHardwarePowerKeyControl", Q_ARG(uchar, in0));
}

QByteArray PowerManagementAdaptor::LgeDBus_SetMPModeInfo(const QByteArray &in0)
{
    // handle method call com.lge.car.micom.powermanagement.LgeDBus_SetMPModeInfo
    QByteArray out0;
    QMetaObject::invokeMethod(parent(), "LgeDBus_SetMPModeInfo", Q_RETURN_ARG(QByteArray, out0), Q_ARG(QByteArray, in0));
    return out0;
}

void PowerManagementAdaptor::LgeDBus_SetSleepConfirm()
{
    // handle method call com.lge.car.micom.powermanagement.LgeDBus_SetSleepConfirm
    QMetaObject::invokeMethod(parent(), "LgeDBus_SetSleepConfirm");
}

