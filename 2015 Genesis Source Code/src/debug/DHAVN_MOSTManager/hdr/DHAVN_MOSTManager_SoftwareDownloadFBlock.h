/*=!AUTO-GENERATED!============================================================
*
*     This code was generated by K2L MAG V2.3.4 at 2012-08-06.
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*     
*==!AUTO-GENERATED!============================================================*/

#ifndef __DHAVN_MOSTMANAGER_SOFTWAREDOWNLOADFBLOCK_H_
#define __DHAVN_MOSTMANAGER_SOFTWAREDOWNLOADFBLOCK_H_

/**
 * HMC DH Fcat v1.19.0
 **/

#include <stdint.h>
#include <K2LSystem.h>
#include <ACSStreams.h>
#include <K2LACSClient.h>
#include <K2LACSMOST.h>
#include <MOSTProtocolDefinitions.h>

namespace acs
{
    namespace generated
    {
        namespace fblock
        {
namespace SoftwareDownload
{

class CSoftwareDownload;

class CVersion
{
	CSoftwareDownload *m_pInstance;
public:
	explicit CVersion( CSoftwareDownload *pInstance );
	~CVersion(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0x10 /* = 16 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedProperty& FunctionInstance(void);
	bool MajorValue( uint8_t value );
uint8_t MajorValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& MajorDataType();
bool MinorValue( uint8_t value );
uint8_t MinorValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& MinorDataType();
bool BuildValue( uint8_t value );
uint8_t BuildValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& BuildDataType();
bool UpdateShadows();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CSoftwareDownload;

class CFBlockInfo
{
	CSoftwareDownload *m_pInstance;
public:
	explicit CFBlockInfo( CSoftwareDownload *pInstance );
	~CFBlockInfo(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0x11 /* = 17 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedProperty& FunctionInstance(void);
	bool IDValue( uint16_t value );
uint16_t IDValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedWord& IDDataType();
enum TFunctionMaturity
{
	FunctionMaturityUnknown = 0,
	FunctionMaturityInterfaceOnly = 1,
	FunctionMaturityPartlyImplemented = 2,
	FunctionMaturityFullyImplemented = 3,
	FunctionMaturityPartlyImplementedAndVerified = 17,
	FunctionMaturityFullyImplementedAndVerified = 18,
};
bool FunctionMaturityValue( acs::generated::fblock::SoftwareDownload::CFBlockInfo::TFunctionMaturity value );
acs::generated::fblock::SoftwareDownload::CFBlockInfo::TFunctionMaturity FunctionMaturityValue() const;
::k2l::acs::protocols::most::CMOSTEnum& FunctionMaturityDataType();
bool FBlockNameValue( uint8_t * value, uint32_t length );
uint8_t * FBlockNameValue() const;
::k2l::acs::protocols::most::CMOSTString& FBlockNameDataType();
uint32_t FBlockNameLength() const;
bool FBlockNameAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding );
bool FBlockNameString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes );
bool FBlockNameString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength );
bool SupplierVersionValue( uint8_t * value, uint32_t length );
uint8_t * SupplierVersionValue() const;
::k2l::acs::protocols::most::CMOSTString& SupplierVersionDataType();
uint32_t SupplierVersionLength() const;
bool SupplierVersionAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding );
bool SupplierVersionString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes );
bool SupplierVersionString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength );
bool FBlockVersionValue( uint8_t * value, uint32_t length );
uint8_t * FBlockVersionValue() const;
::k2l::acs::protocols::most::CMOSTString& FBlockVersionDataType();
uint32_t FBlockVersionLength() const;
bool FBlockVersionAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding );
bool FBlockVersionString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes );
bool FBlockVersionString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength );
bool MOSTVersionValue( uint8_t * value, uint32_t length );
uint8_t * MOSTVersionValue() const;
::k2l::acs::protocols::most::CMOSTString& MOSTVersionDataType();
uint32_t MOSTVersionLength() const;
bool MOSTVersionAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding );
bool MOSTVersionString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes );
bool MOSTVersionString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength );
bool SystemIntegratorValue( uint8_t * value, uint32_t length );
uint8_t * SystemIntegratorValue() const;
::k2l::acs::protocols::most::CMOSTString& SystemIntegratorDataType();
uint32_t SystemIntegratorLength() const;
bool SystemIntegratorAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding );
bool SystemIntegratorString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes );
bool SystemIntegratorString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength );
bool FBlockTypeValue( uint8_t * value, uint32_t length );
uint8_t * FBlockTypeValue() const;
::k2l::acs::protocols::most::CMOSTString& FBlockTypeDataType();
uint32_t FBlockTypeLength() const;
bool FBlockTypeAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding );
bool FBlockTypeString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes );
bool FBlockTypeString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength );
bool DescriptionValue( uint8_t * value, uint32_t length );
const uint8_t * DescriptionValue() const;
::k2l::acs::protocols::most::CMOSTCaseStream& DescriptionDataType();
uint32_t DescriptionStreamLength() const;
bool DescriptionLoadNext();
bool DescriptionSaveNext();
bool UpdateShadows();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CSoftwareDownload;

class CReadHWIdentifier
{
	CSoftwareDownload *m_pInstance;
public:
	explicit CReadHWIdentifier( CSoftwareDownload *pInstance );
	~CReadHWIdentifier(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC01 /* = 3073 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty& FunctionInstance(void);
	bool HWIdentifierValue( uint8_t * value, uint32_t length );
uint8_t * HWIdentifierValue() const;
::k2l::acs::protocols::most::CMOSTString& HWIdentifierDataType();
uint32_t HWIdentifierLength() const;
bool HWIdentifierAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding );
bool HWIdentifierString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes );
bool HWIdentifierString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength );
bool UpdateShadows();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CSoftwareDownload;

class CReadDevName
{
	CSoftwareDownload *m_pInstance;
public:
	explicit CReadDevName( CSoftwareDownload *pInstance );
	~CReadDevName(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC02 /* = 3074 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty& FunctionInstance(void);
	bool DeviceNameValue( uint8_t * value, uint32_t length );
uint8_t * DeviceNameValue() const;
::k2l::acs::protocols::most::CMOSTString& DeviceNameDataType();
uint32_t DeviceNameLength() const;
bool DeviceNameAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding );
bool DeviceNameString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes );
bool DeviceNameString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength );
bool UpdateShadows();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CSoftwareDownload;

class CReadHWVersion
{
	CSoftwareDownload *m_pInstance;
public:
	explicit CReadHWVersion( CSoftwareDownload *pInstance );
	~CReadHWVersion(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC03 /* = 3075 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty& FunctionInstance(void);
	bool HWVersionValue( uint8_t * value, uint32_t length );
uint8_t * HWVersionValue() const;
::k2l::acs::protocols::most::CMOSTString& HWVersionDataType();
uint32_t HWVersionLength() const;
bool HWVersionAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding );
bool HWVersionString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes );
bool HWVersionString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength );
bool UpdateShadows();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CSoftwareDownload;

class CReadNumberOfModule
{
	CSoftwareDownload *m_pInstance;
public:
	explicit CReadNumberOfModule( CSoftwareDownload *pInstance );
	~CReadNumberOfModule(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC04 /* = 3076 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty& FunctionInstance(void);
	bool CodeModulesValue( uint8_t value );
uint8_t CodeModulesValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& CodeModulesDataType();
bool DataModulesValue( uint8_t value );
uint8_t DataModulesValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& DataModulesDataType();
bool BootModulesValue( uint8_t value );
uint8_t BootModulesValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& BootModulesDataType();
bool ModuleCountValue( uint8_t * value, uint32_t length );
const uint8_t * ModuleCountValue() const;
::k2l::acs::protocols::most::CMOSTList& ModuleCountDataType();
uint32_t ModuleCountStreamLength() const;
bool ModuleCountLoadNext();
bool ModuleCountSaveNext();
bool UpdateShadows();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CSoftwareDownload;

class CReadModuleVersion
{
	CSoftwareDownload *m_pInstance;
public:
	explicit CReadModuleVersion( CSoftwareDownload *pInstance );
	~CReadModuleVersion(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC05 /* = 3077 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassArray& FunctionInstance(void);
	enum TDataModuleType
{
	DataModuleTypeCodeModule = 1,
	DataModuleTypeDataModule = 2,
	DataModuleTypeBootModule = 3,
	DataModuleTypeInvalid = 255,
};
bool DataModuleTypeValue( uint8_t index, acs::generated::fblock::SoftwareDownload::CReadModuleVersion::TDataModuleType value );
acs::generated::fblock::SoftwareDownload::CReadModuleVersion::TDataModuleType DataModuleTypeValue( uint8_t index ) const;
::k2l::acs::protocols::most::CMOSTEnum& DataModuleTypeDataType( uint8_t index );
bool DataModuleVersionValue( uint8_t index, uint8_t * value, uint32_t length );
uint8_t * DataModuleVersionValue( uint8_t index ) const;
::k2l::acs::protocols::most::CMOSTString& DataModuleVersionDataType( uint8_t index );
uint32_t DataModuleVersionLength( uint8_t index ) const;
bool DataModuleVersionAddEncoding( uint8_t index , uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding );
bool DataModuleVersionString( uint8_t index , const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes );
bool DataModuleVersionString( uint8_t index , const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength );
::k2l::acs::protocols::most::CMOSTRecord& RecordDataType( uint8_t index );
uint32_t Size() const;
bool Size( uint32_t newSize ); 
bool UpdateShadows();
::k2l::acs::protocols::most::CMOSTArray& DataType( uint8_t index );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CSoftwareDownload;

class CReprogrammingMode
{
	CSoftwareDownload *m_pInstance;
public:
	explicit CReprogrammingMode( CSoftwareDownload *pInstance );
	~CReprogrammingMode(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC06 /* = 3078 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassSequenceMethod& FunctionInstance(void);
	bool SenderHandleValue( uint16_t value );
uint16_t SenderHandleValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedWord& SenderHandleDataType();
enum TSWDLMode
{
	SWDLModeNormalOperationMode = 0,
	SWDLModeReprogrammingMode = 1,
	SWDLModeInvalid = 255,
};
bool SWDLModeValue( acs::generated::fblock::SoftwareDownload::CReprogrammingMode::TSWDLMode value );
acs::generated::fblock::SoftwareDownload::CReprogrammingMode::TSWDLMode SWDLModeValue() const;
::k2l::acs::protocols::most::CMOSTEnum& SWDLModeDataType();
bool ParseStartResultAck( uint32_t payloadLength, const uint8_t * payload );
bool ResultAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice );
bool ProcessingAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint16_t senderHandle );
void SetHandler( ::k2l::acs::protocols::most::IFunctionBlockMethodHandler *pHandler );
bool ParseSenderHandle( uint32_t payloadLength, const uint8_t *payload, uint16_t *pSenderHandle );            
bool ErrorAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint16_t senderHandle, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CSoftwareDownload;

class CInitUpdate
{
	CSoftwareDownload *m_pInstance;
public:
	explicit CInitUpdate( CSoftwareDownload *pInstance );
	~CInitUpdate(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC07 /* = 3079 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassSequenceMethod& FunctionInstance(void);
	bool SenderHandleValue( uint16_t value );
uint16_t SenderHandleValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedWord& SenderHandleDataType();
bool DayValue( uint8_t value );
uint8_t DayValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& DayDataType();
bool MonthValue( uint8_t value );
uint8_t MonthValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& MonthDataType();
bool YearValue( uint16_t value );
uint16_t YearValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedWord& YearDataType();
bool DiscIDValue( uint8_t * value, uint32_t length );
uint8_t * DiscIDValue() const;
::k2l::acs::protocols::most::CMOSTString& DiscIDDataType();
uint32_t DiscIDLength() const;
bool DiscIDAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding );
bool DiscIDString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes );
bool DiscIDString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength );
bool ParseStartResultAck( uint32_t payloadLength, const uint8_t * payload );
bool ResultAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice );
bool ProcessingAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint16_t senderHandle );
void SetHandler( ::k2l::acs::protocols::most::IFunctionBlockMethodHandler *pHandler );
bool ParseSenderHandle( uint32_t payloadLength, const uint8_t *payload, uint16_t *pSenderHandle );            
bool ErrorAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint16_t senderHandle, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CSoftwareDownload;

class CEraseMemory
{
	CSoftwareDownload *m_pInstance;
public:
	explicit CEraseMemory( CSoftwareDownload *pInstance );
	~CEraseMemory(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC08 /* = 3080 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassSequenceMethod& FunctionInstance(void);
	bool SenderHandleValue( uint16_t value );
uint16_t SenderHandleValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedWord& SenderHandleDataType();
enum TModuleType
{
	ModuleTypeCodeModule = 1,
	ModuleTypeDataModule = 2,
	ModuleTypeBootModule = 3,
	ModuleTypeInvalid = 255,
};
bool ModuleTypeValue( acs::generated::fblock::SoftwareDownload::CEraseMemory::TModuleType value );
acs::generated::fblock::SoftwareDownload::CEraseMemory::TModuleType ModuleTypeValue() const;
::k2l::acs::protocols::most::CMOSTEnum& ModuleTypeDataType();
bool ModuleIndexValue( uint8_t value );
uint8_t ModuleIndexValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& ModuleIndexDataType();
bool ParseStartResultAck( uint32_t payloadLength, const uint8_t * payload );
bool ResultAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice );
bool ProcessingAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint16_t senderHandle );
void SetHandler( ::k2l::acs::protocols::most::IFunctionBlockMethodHandler *pHandler );
bool ParseSenderHandle( uint32_t payloadLength, const uint8_t *payload, uint16_t *pSenderHandle );            
bool ErrorAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint16_t senderHandle, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CSoftwareDownload;

class CRequestDownload
{
	CSoftwareDownload *m_pInstance;
public:
	explicit CRequestDownload( CSoftwareDownload *pInstance );
	~CRequestDownload(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC09 /* = 3081 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassSequenceMethod& FunctionInstance(void);
	bool SenderHandleValue( uint16_t value );
uint16_t SenderHandleValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedWord& SenderHandleDataType();
bool BlockSizeValue( uint16_t value );
uint16_t BlockSizeValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedWord& BlockSizeDataType();
enum TSWDLChannel
{
	SWDLChannelCMS = 1,
	SWDLChannelADS = 2,
};
bool SWDLChannelValue( acs::generated::fblock::SoftwareDownload::CRequestDownload::TSWDLChannel value );
acs::generated::fblock::SoftwareDownload::CRequestDownload::TSWDLChannel SWDLChannelValue() const;
::k2l::acs::protocols::most::CMOSTEnum& SWDLChannelDataType();
bool ResultAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice );
enum TModuleType
{
	ModuleTypeCodeModule = 1,
	ModuleTypeDataModule = 2,
	ModuleTypeBootModule = 3,
	ModuleTypeInvalid = 255,
};
bool ModuleTypeValue( acs::generated::fblock::SoftwareDownload::CRequestDownload::TModuleType value );
acs::generated::fblock::SoftwareDownload::CRequestDownload::TModuleType ModuleTypeValue() const;
::k2l::acs::protocols::most::CMOSTEnum& ModuleTypeDataType();
bool ModuleIndexValue( uint8_t value );
uint8_t ModuleIndexValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& ModuleIndexDataType();
bool ParseStartResultAck( uint32_t payloadLength, const uint8_t * payload );
bool ProcessingAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint16_t senderHandle );
void SetHandler( ::k2l::acs::protocols::most::IFunctionBlockMethodHandler *pHandler );
bool ParseSenderHandle( uint32_t payloadLength, const uint8_t *payload, uint16_t *pSenderHandle );            
bool ErrorAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint16_t senderHandle, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CSoftwareDownload;

class CPrepareFileTransfer
{
	CSoftwareDownload *m_pInstance;
public:
	explicit CPrepareFileTransfer( CSoftwareDownload *pInstance );
	~CPrepareFileTransfer(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC0A /* = 3082 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassSequenceMethod& FunctionInstance(void);
	bool SenderHandleValue( uint16_t value );
uint16_t SenderHandleValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedWord& SenderHandleDataType();
bool FileSizeValue( uint32_t value );
uint32_t FileSizeValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedLong& FileSizeDataType();
bool SWDLFileNameValue( uint8_t * value, uint32_t length );
uint8_t * SWDLFileNameValue() const;
::k2l::acs::protocols::most::CMOSTString& SWDLFileNameDataType();
uint32_t SWDLFileNameLength() const;
bool SWDLFileNameAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding );
bool SWDLFileNameString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes );
bool SWDLFileNameString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength );
bool ParseStartResultAck( uint32_t payloadLength, const uint8_t * payload );
bool ResultAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice );
bool ProcessingAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint16_t senderHandle );
void SetHandler( ::k2l::acs::protocols::most::IFunctionBlockMethodHandler *pHandler );
bool ParseSenderHandle( uint32_t payloadLength, const uint8_t *payload, uint16_t *pSenderHandle );            
bool ErrorAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint16_t senderHandle, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CSoftwareDownload;

class CTransferDataCMS
{
	CSoftwareDownload *m_pInstance;
public:
	explicit CTransferDataCMS( CSoftwareDownload *pInstance );
	~CTransferDataCMS(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC0B /* = 3083 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassSequenceMethod& FunctionInstance(void);
	bool SenderHandleValue( uint16_t value );
uint16_t SenderHandleValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedWord& SenderHandleDataType();
bool BlockCounterValue( uint32_t value );
uint32_t BlockCounterValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedLong& BlockCounterDataType();
bool SWDLDataValue( uint8_t * value, uint32_t length );
uint8_t * SWDLDataValue() const;
::k2l::acs::protocols::most::CMOSTStream& SWDLDataDataType();
uint32_t SWDLDataStreamLength() const;
bool ParseStartResultAck( uint32_t payloadLength, const uint8_t * payload );
bool ResultAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice );
bool ProcessingAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint16_t senderHandle );
void SetHandler( ::k2l::acs::protocols::most::IFunctionBlockMethodHandler *pHandler );
bool ParseSenderHandle( uint32_t payloadLength, const uint8_t *payload, uint16_t *pSenderHandle );            
bool ErrorAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint16_t senderHandle, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CSoftwareDownload;

class CTransferDataAMS
{
	CSoftwareDownload *m_pInstance;
public:
	explicit CTransferDataAMS( CSoftwareDownload *pInstance );
	~CTransferDataAMS(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC0C /* = 3084 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassSequenceMethod& FunctionInstance(void);
	bool SenderHandleValue( uint16_t value );
uint16_t SenderHandleValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedWord& SenderHandleDataType();
bool BlockCounterValue( uint32_t value );
uint32_t BlockCounterValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedLong& BlockCounterDataType();
bool SWDLDataValue( uint8_t * value, uint32_t length );
uint8_t * SWDLDataValue() const;
::k2l::acs::protocols::most::CMOSTStream& SWDLDataDataType();
uint32_t SWDLDataStreamLength() const;
bool ParseStartResultAck( uint32_t payloadLength, const uint8_t * payload );
bool ResultAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice );
bool ProcessingAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint16_t senderHandle );
void SetHandler( ::k2l::acs::protocols::most::IFunctionBlockMethodHandler *pHandler );
bool ParseSenderHandle( uint32_t payloadLength, const uint8_t *payload, uint16_t *pSenderHandle );            
bool ErrorAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint16_t senderHandle, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CSoftwareDownload;

class CRequestTransferExit
{
	CSoftwareDownload *m_pInstance;
public:
	explicit CRequestTransferExit( CSoftwareDownload *pInstance );
	~CRequestTransferExit(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC0D /* = 3085 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedMethod& FunctionInstance(void);
	bool SenderHandleValue( uint16_t value );
uint16_t SenderHandleValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedWord& SenderHandleDataType();
bool ParseStartResultAck( uint32_t payloadLength, const uint8_t * payload );
bool ResultAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice );
bool ProcessingAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint16_t senderHandle );
void SetHandler( ::k2l::acs::protocols::most::IFunctionBlockMethodHandler *pHandler );
bool ParseSenderHandle( uint32_t payloadLength, const uint8_t *payload, uint16_t *pSenderHandle );            
bool ErrorAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint16_t senderHandle, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CSoftwareDownload;

class CCheckActivateModule
{
	CSoftwareDownload *m_pInstance;
public:
	explicit CCheckActivateModule( CSoftwareDownload *pInstance );
	~CCheckActivateModule(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC0E /* = 3086 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassSequenceMethod& FunctionInstance(void);
	bool SenderHandleValue( uint16_t value );
uint16_t SenderHandleValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedWord& SenderHandleDataType();
bool CheckSumValue( uint8_t * value, uint32_t length );
uint8_t * CheckSumValue() const;
::k2l::acs::protocols::most::CMOSTStream& CheckSumDataType();
uint32_t CheckSumStreamLength() const;
bool ParseStartResultAck( uint32_t payloadLength, const uint8_t * payload );
bool ResultAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice );
bool ProcessingAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint16_t senderHandle );
void SetHandler( ::k2l::acs::protocols::most::IFunctionBlockMethodHandler *pHandler );
bool ParseSenderHandle( uint32_t payloadLength, const uint8_t *payload, uint16_t *pSenderHandle );            
bool ErrorAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint16_t senderHandle, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CSoftwareDownload;

class CSWDLProgressInfo
{
	CSoftwareDownload *m_pInstance;
public:
	explicit CSWDLProgressInfo( CSoftwareDownload *pInstance );
	~CSWDLProgressInfo(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC0F /* = 3087 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty& FunctionInstance(void);
	enum TSWDLOpMode
{
	SWDLOpModeInitiateUpdate = 1,
	SWDLOpModeEraseMemory = 2,
	SWDLOpModeRequestDownload = 3,
	SWDLOpModePrepareFileTransfer = 4,
	SWDLOpModeTransferDataCMS = 5,
	SWDLOpModeTransferDataAMS = 6,
	SWDLOpModeRequestTransferExit = 7,
	SWDLOpModeCheckAndActivateModule = 8,
	SWDLOpModeInvalid = 255,
};
bool SWDLOpModeValue( acs::generated::fblock::SoftwareDownload::CSWDLProgressInfo::TSWDLOpMode value );
acs::generated::fblock::SoftwareDownload::CSWDLProgressInfo::TSWDLOpMode SWDLOpModeValue() const;
::k2l::acs::protocols::most::CMOSTEnum& SWDLOpModeDataType();
bool SWDLProgressValue( uint8_t value );
uint8_t SWDLProgressValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& SWDLProgressDataType();
bool SWDLProgressDataValue( uint8_t * value, uint32_t length );
const uint8_t * SWDLProgressDataValue() const;
::k2l::acs::protocols::most::CMOSTList& SWDLProgressDataDataType();
uint32_t SWDLProgressDataStreamLength() const;
bool SWDLProgressDataLoadNext();
bool SWDLProgressDataSaveNext();
bool UpdateShadows();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CSoftwareDownload;

class CUpdateProcessingInfo
{
	CSoftwareDownload *m_pInstance;
public:
	explicit CUpdateProcessingInfo( CSoftwareDownload *pInstance );
	~CUpdateProcessingInfo(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC10 /* = 3088 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassEnumeration& FunctionInstance(void);
	enum TUpdateStatus
{
	UpdateStatusReady = 0,
	UpdateStatusUpdating = 1,
	UpdateStatusCompleted = 2,
	UpdateStatusFailed = 17,
	UpdateStatusInvalid = 255,
};
bool UpdateShadows();
bool Value( acs::generated::fblock::SoftwareDownload::CUpdateProcessingInfo::TUpdateStatus value );
acs::generated::fblock::SoftwareDownload::CUpdateProcessingInfo::TUpdateStatus Value() const;
::k2l::acs::protocols::most::CMOSTEnum& DataType();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};

class CSoftwareDownload: public ::k2l::acs::protocols::most::CFunctionBlockBase
{
private:
	CSoftwareDownload();
	CSoftwareDownload(CSoftwareDownload& toCopy);
public:
	enum
	{
		FBlockID = 0xA4 /* = 164 (decimal) */
	};

	CSoftwareDownload( ::k2l::acs::protocols::most::InstanceID_t instanceID );
	CSoftwareDownload( ::k2l::acs::protocols::most::FBlockID_t fblockID,
		k2l::acs::protocols::most::InstanceID_t instanceID );
	virtual ~CSoftwareDownload( void );

	virtual bool InitializeMOSTElement();
	inline ::k2l::acs::protocols::most::CWellknownFunctionNotificationCheck& NotificationCheckFunctionInstance() { return m_notificationCheckFunction; }
inline ::k2l::acs::protocols::most::CWellknownFunctionNotification& NotificationFunctionInstance() { return m_notificationFunction; }
inline ::k2l::acs::protocols::most::CWellknownFunctionFktIDs& FktIDsFunctionInstance() { return m_fktIDsFunction; }

private:
::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedProperty m_versionFunction;
::k2l::acs::protocols::most::CMOSTUnsignedByte m_versionMajorParameter;
::k2l::acs::protocols::most::CMOSTUnsignedByte m_versionMinorParameter;
::k2l::acs::protocols::most::CMOSTUnsignedByte m_versionBuildParameter;
::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedProperty m_fBlockInfoFunction;
::k2l::acs::protocols::most::CMOSTUnsignedWord m_fBlockInfoIDParameter;
::k2l::acs::protocols::most::CMOSTEnum m_fBlockInfoFunctionMaturityParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_fBlockInfoFunctionMaturityParameterSpec;
const static uint8_t m_fBlockInfoFunctionMaturityParameterSpecValues[6];
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription0RecordFixParameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription0RecordIteratorParameter;
::k2l::acs::protocols::most::CMOSTList m_fBlockInfoDescription0Parameter;
::k2l::acs::protocols::most::CMOSTString m_fBlockInfoFBlockNameParameter;
::k2l::acs::protocols::most::CMOSTStringSpecification m_fBlockInfoFBlockNameParameterSpec;
::k2l::acs::protocols::most::CMOSTString m_fBlockInfoSupplierVersionParameter;
::k2l::acs::protocols::most::CMOSTStringSpecification m_fBlockInfoSupplierVersionParameterSpec;
::k2l::acs::protocols::most::CMOSTString m_fBlockInfoFBlockVersionParameter;
::k2l::acs::protocols::most::CMOSTStringSpecification m_fBlockInfoFBlockVersionParameterSpec;
::k2l::acs::protocols::most::CMOSTString m_fBlockInfoMOSTVersionParameter;
::k2l::acs::protocols::most::CMOSTStringSpecification m_fBlockInfoMOSTVersionParameterSpec;
::k2l::acs::protocols::most::CMOSTString m_fBlockInfoSystemIntegratorParameter;
::k2l::acs::protocols::most::CMOSTStringSpecification m_fBlockInfoSystemIntegratorParameterSpec;
::k2l::acs::protocols::most::CMOSTString m_fBlockInfoFBlockTypeParameter;
::k2l::acs::protocols::most::CMOSTStringSpecification m_fBlockInfoFBlockTypeParameterSpec;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61440RecordFixParameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61440RecordIteratorParameter;
::k2l::acs::protocols::most::CMOSTList m_fBlockInfoDescription61440Parameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61441RecordFixParameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61441RecordIteratorParameter;
::k2l::acs::protocols::most::CMOSTList m_fBlockInfoDescription61441Parameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61442RecordFixParameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61442RecordIteratorParameter;
::k2l::acs::protocols::most::CMOSTList m_fBlockInfoDescription61442Parameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61443RecordFixParameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61443RecordIteratorParameter;
::k2l::acs::protocols::most::CMOSTList m_fBlockInfoDescription61443Parameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61444RecordFixParameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61444RecordIteratorParameter;
::k2l::acs::protocols::most::CMOSTList m_fBlockInfoDescription61444Parameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61445RecordFixParameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61445RecordIteratorParameter;
::k2l::acs::protocols::most::CMOSTList m_fBlockInfoDescription61445Parameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61446RecordFixParameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61446RecordIteratorParameter;
::k2l::acs::protocols::most::CMOSTList m_fBlockInfoDescription61446Parameter;
::k2l::acs::protocols::most::CMOSTCaseStream m_fBlockInfoDescriptionParameter;
::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty m_readHWIdentifierFunction;
::k2l::acs::protocols::most::CMOSTString m_readHWIdentifierHWIdentifierParameter;
::k2l::acs::protocols::most::CMOSTStringSpecification m_readHWIdentifierHWIdentifierParameterSpec;
::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty m_readDevNameFunction;
::k2l::acs::protocols::most::CMOSTString m_readDevNameDeviceNameParameter;
::k2l::acs::protocols::most::CMOSTStringSpecification m_readDevNameDeviceNameParameterSpec;
::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty m_readHWVersionFunction;
::k2l::acs::protocols::most::CMOSTString m_readHWVersionHWVersionParameter;
::k2l::acs::protocols::most::CMOSTStringSpecification m_readHWVersionHWVersionParameterSpec;
::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty m_readNumberOfModuleFunction;
::k2l::acs::protocols::most::CMOSTUnsignedByte m_readNumberOfModuleCodeModulesParameter;
::k2l::acs::protocols::most::CMOSTUnsignedByte m_readNumberOfModuleDataModulesParameter;
::k2l::acs::protocols::most::CMOSTUnsignedByte m_readNumberOfModuleBootModulesParameter;
::k2l::acs::protocols::most::CMOSTRecord m_readNumberOfModuleModuleCountRecordFixParameter;
::k2l::acs::protocols::most::CMOSTRecord m_readNumberOfModuleModuleCountRecordIteratorParameter;
::k2l::acs::protocols::most::CMOSTList m_readNumberOfModuleModuleCountParameter;
::k2l::acs::protocols::most::CMOSTFunctionClassArray m_readModuleVersionFunction;
::k2l::acs::protocols::most::CMOSTRecord m_readModuleVersionDataRecordParameter[3];
::k2l::acs::protocols::most::CMOSTEnum m_readModuleVersionDataModuleTypeParameter[3];
::k2l::acs::protocols::most::CMOSTEnumSpecification m_readModuleVersionDataModuleTypeParameterSpec;
const static uint8_t m_readModuleVersionDataModuleTypeParameterSpecValues[4];
::k2l::acs::protocols::most::CMOSTString m_readModuleVersionDataModuleVersionParameter[3];
::k2l::acs::protocols::most::CMOSTStringSpecification m_readModuleVersionDataModuleVersionParameterSpec;
::k2l::acs::protocols::most::CMOSTFunctionClassSequenceMethod m_reprogrammingModeFunction;
::k2l::acs::protocols::most::CMOSTUnsignedWord m_reprogrammingModeSenderHandleParameter;
::k2l::acs::protocols::most::CMOSTEnum m_reprogrammingModeSWDLModeParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_reprogrammingModeSWDLModeParameterSpec;
const static uint8_t m_reprogrammingModeSWDLModeParameterSpecValues[3];
::k2l::acs::protocols::most::CMOSTFunctionClassSequenceMethod m_initUpdateFunction;
::k2l::acs::protocols::most::CMOSTUnsignedWord m_initUpdateSenderHandleParameter;
::k2l::acs::protocols::most::CMOSTUnsignedByte m_initUpdateDayParameter;
::k2l::acs::protocols::most::CNumberSpecificationUnsignedByte m_initUpdateDayParameterSpec;
::k2l::acs::protocols::most::CMOSTUnsignedByte m_initUpdateMonthParameter;
::k2l::acs::protocols::most::CNumberSpecificationUnsignedByte m_initUpdateMonthParameterSpec;
::k2l::acs::protocols::most::CMOSTUnsignedWord m_initUpdateYearParameter;
::k2l::acs::protocols::most::CMOSTString m_initUpdateDiscIDParameter;
::k2l::acs::protocols::most::CMOSTStringSpecification m_initUpdateDiscIDParameterSpec;
::k2l::acs::protocols::most::CMOSTFunctionClassSequenceMethod m_eraseMemoryFunction;
::k2l::acs::protocols::most::CMOSTUnsignedWord m_eraseMemorySenderHandleParameter;
::k2l::acs::protocols::most::CMOSTEnum m_eraseMemoryModuleTypeParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_eraseMemoryModuleTypeParameterSpec;
const static uint8_t m_eraseMemoryModuleTypeParameterSpecValues[4];
::k2l::acs::protocols::most::CMOSTUnsignedByte m_eraseMemoryModuleIndexParameter;
::k2l::acs::protocols::most::CNumberSpecificationUnsignedByte m_eraseMemoryModuleIndexParameterSpec;
::k2l::acs::protocols::most::CMOSTFunctionClassSequenceMethod m_requestDownloadFunction;
::k2l::acs::protocols::most::CMOSTUnsignedWord m_requestDownloadSenderHandleParameter;
::k2l::acs::protocols::most::CMOSTUnsignedWord m_requestDownloadBlockSizeParameter;
::k2l::acs::protocols::most::CMOSTEnum m_requestDownloadSWDLChannelParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_requestDownloadSWDLChannelParameterSpec;
const static uint8_t m_requestDownloadSWDLChannelParameterSpecValues[2];
::k2l::acs::protocols::most::CMOSTEnum m_requestDownloadModuleTypeParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_requestDownloadModuleTypeParameterSpec;
const static uint8_t m_requestDownloadModuleTypeParameterSpecValues[4];
::k2l::acs::protocols::most::CMOSTUnsignedByte m_requestDownloadModuleIndexParameter;
::k2l::acs::protocols::most::CNumberSpecificationUnsignedByte m_requestDownloadModuleIndexParameterSpec;
::k2l::acs::protocols::most::CMOSTFunctionClassSequenceMethod m_prepareFileTransferFunction;
::k2l::acs::protocols::most::CMOSTUnsignedWord m_prepareFileTransferSenderHandleParameter;
::k2l::acs::protocols::most::CMOSTUnsignedLong m_prepareFileTransferFileSizeParameter;
::k2l::acs::protocols::most::CMOSTString m_prepareFileTransferSWDLFileNameParameter;
::k2l::acs::protocols::most::CMOSTStringSpecification m_prepareFileTransferSWDLFileNameParameterSpec;
::k2l::acs::protocols::most::CMOSTFunctionClassSequenceMethod m_transferDataCMSFunction;
::k2l::acs::protocols::most::CMOSTUnsignedWord m_transferDataCMSSenderHandleParameter;
::k2l::acs::protocols::most::CMOSTUnsignedLong m_transferDataCMSBlockCounterParameter;
::k2l::acs::protocols::most::CMOSTStream m_transferDataCMSSWDLDataParameter;
::k2l::acs::protocols::most::CMOSTFunctionClassSequenceMethod m_transferDataAMSFunction;
::k2l::acs::protocols::most::CMOSTUnsignedWord m_transferDataAMSSenderHandleParameter;
::k2l::acs::protocols::most::CMOSTUnsignedLong m_transferDataAMSBlockCounterParameter;
::k2l::acs::protocols::most::CMOSTStream m_transferDataAMSSWDLDataParameter;
::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedMethod m_requestTransferExitFunction;
::k2l::acs::protocols::most::CMOSTUnsignedWord m_requestTransferExitSenderHandleParameter;
::k2l::acs::protocols::most::CMOSTFunctionClassSequenceMethod m_checkActivateModuleFunction;
::k2l::acs::protocols::most::CMOSTUnsignedWord m_checkActivateModuleSenderHandleParameter;
::k2l::acs::protocols::most::CMOSTStream m_checkActivateModuleCheckSumParameter;
::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty m_sWDLProgressInfoFunction;
::k2l::acs::protocols::most::CMOSTEnum m_sWDLProgressInfoSWDLOpModeParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_sWDLProgressInfoSWDLOpModeParameterSpec;
const static uint8_t m_sWDLProgressInfoSWDLOpModeParameterSpecValues[9];
::k2l::acs::protocols::most::CMOSTUnsignedByte m_sWDLProgressInfoSWDLProgressParameter;
::k2l::acs::protocols::most::CNumberSpecificationUnsignedByte m_sWDLProgressInfoSWDLProgressParameterSpec;
::k2l::acs::protocols::most::CMOSTRecord m_sWDLProgressInfoSWDLProgressDataRecordFixParameter;
::k2l::acs::protocols::most::CMOSTRecord m_sWDLProgressInfoSWDLProgressDataRecordIteratorParameter;
::k2l::acs::protocols::most::CMOSTList m_sWDLProgressInfoSWDLProgressDataParameter;
::k2l::acs::protocols::most::CMOSTFunctionClassEnumeration m_updateProcessingInfoFunction;
::k2l::acs::protocols::most::CMOSTEnum m_updateProcessingInfoUpdateStatusParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_updateProcessingInfoUpdateStatusParameterSpec;
const static uint8_t m_updateProcessingInfoUpdateStatusParameterSpecValues[5];
::k2l::acs::protocols::most::CWellknownFunctionNotificationCheck m_notificationCheckFunction;
::k2l::acs::protocols::most::CWellknownFunctionNotification m_notificationFunction;
::k2l::acs::protocols::most::CWellknownFunctionFktIDs m_fktIDsFunction;
friend class CVersion;
friend class CFBlockInfo;
friend class CReadHWIdentifier;
friend class CReadDevName;
friend class CReadHWVersion;
friend class CReadNumberOfModule;
friend class CReadModuleVersion;
friend class CReprogrammingMode;
friend class CInitUpdate;
friend class CEraseMemory;
friend class CRequestDownload;
friend class CPrepareFileTransfer;
friend class CTransferDataCMS;
friend class CTransferDataAMS;
friend class CRequestTransferExit;
friend class CCheckActivateModule;
friend class CSWDLProgressInfo;
friend class CUpdateProcessingInfo;

};
}
        }
    }
}



#endif // __DHAVN_MOSTMANAGER_SOFTWAREDOWNLOADFBLOCK_H_
/*=============================================================================
 * END OF FILE
 *=============================================================================*/
