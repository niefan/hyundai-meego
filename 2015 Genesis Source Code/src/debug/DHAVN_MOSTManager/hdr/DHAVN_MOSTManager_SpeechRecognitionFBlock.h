/*=!AUTO-GENERATED!============================================================
*
*     This code was generated by K2L MAG V2.3.4 at 2012-07-09.
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*     
*==!AUTO-GENERATED!============================================================*/

#ifndef __DHAVN_MOSTMANAGER_SPEECHRECOGNITIONFBLOCK_H_
#define __DHAVN_MOSTMANAGER_SPEECHRECOGNITIONFBLOCK_H_

/**
 * HMC DH Fcat v1.18.2
 **/

#include <stdint.h>
#include <K2LSystem.h>
#include <ACSStreams.h>
#include <K2LACSClient.h>
#include <K2LACSMOST.h>
#include <MOSTProtocolDefinitions.h>

namespace acs
{
    namespace generated
    {
        namespace fblock
        {
namespace SpeechRecognition
{

class CSpeechRecognition;

class CVersion
{
	CSpeechRecognition *m_pInstance;
public:
	explicit CVersion( CSpeechRecognition *pInstance );
	~CVersion(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0x10 /* = 16 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedProperty& FunctionInstance(void);
	bool MajorValue( uint8_t value );
uint8_t MajorValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& MajorDataType();
bool MinorValue( uint8_t value );
uint8_t MinorValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& MinorDataType();
bool BuildValue( uint8_t value );
uint8_t BuildValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& BuildDataType();
bool UpdateShadows();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CSpeechRecognition;

class CFBlockInfo
{
	CSpeechRecognition *m_pInstance;
public:
	explicit CFBlockInfo( CSpeechRecognition *pInstance );
	~CFBlockInfo(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0x11 /* = 17 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedProperty& FunctionInstance(void);
	bool IDValue( uint16_t value );
uint16_t IDValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedWord& IDDataType();
enum TFunctionMaturity
{
	FunctionMaturityUnknown = 0,
	FunctionMaturityInterfaceOnly = 1,
	FunctionMaturityPartlyImplemented = 2,
	FunctionMaturityFullyImplemented = 3,
	FunctionMaturityPartlyImplementedAndVerified = 17,
	FunctionMaturityFullyImplementedAndVerified = 18,
};
bool FunctionMaturityValue( acs::generated::fblock::SpeechRecognition::CFBlockInfo::TFunctionMaturity value );
acs::generated::fblock::SpeechRecognition::CFBlockInfo::TFunctionMaturity FunctionMaturityValue() const;
::k2l::acs::protocols::most::CMOSTEnum& FunctionMaturityDataType();
bool FBlockNameValue( uint8_t * value, uint32_t length );
uint8_t * FBlockNameValue() const;
::k2l::acs::protocols::most::CMOSTString& FBlockNameDataType();
uint32_t FBlockNameLength() const;
bool FBlockNameAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding );
bool FBlockNameString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes );
bool FBlockNameString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength );
bool SupplierVersionValue( uint8_t * value, uint32_t length );
uint8_t * SupplierVersionValue() const;
::k2l::acs::protocols::most::CMOSTString& SupplierVersionDataType();
uint32_t SupplierVersionLength() const;
bool SupplierVersionAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding );
bool SupplierVersionString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes );
bool SupplierVersionString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength );
bool FBlockVersionValue( uint8_t * value, uint32_t length );
uint8_t * FBlockVersionValue() const;
::k2l::acs::protocols::most::CMOSTString& FBlockVersionDataType();
uint32_t FBlockVersionLength() const;
bool FBlockVersionAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding );
bool FBlockVersionString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes );
bool FBlockVersionString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength );
bool MOSTVersionValue( uint8_t * value, uint32_t length );
uint8_t * MOSTVersionValue() const;
::k2l::acs::protocols::most::CMOSTString& MOSTVersionDataType();
uint32_t MOSTVersionLength() const;
bool MOSTVersionAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding );
bool MOSTVersionString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes );
bool MOSTVersionString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength );
bool SystemIntegratorValue( uint8_t * value, uint32_t length );
uint8_t * SystemIntegratorValue() const;
::k2l::acs::protocols::most::CMOSTString& SystemIntegratorDataType();
uint32_t SystemIntegratorLength() const;
bool SystemIntegratorAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding );
bool SystemIntegratorString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes );
bool SystemIntegratorString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength );
bool FBlockTypeValue( uint8_t * value, uint32_t length );
uint8_t * FBlockTypeValue() const;
::k2l::acs::protocols::most::CMOSTString& FBlockTypeDataType();
uint32_t FBlockTypeLength() const;
bool FBlockTypeAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding );
bool FBlockTypeString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes );
bool FBlockTypeString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength );
bool DescriptionValue( uint8_t * value, uint32_t length );
const uint8_t * DescriptionValue() const;
::k2l::acs::protocols::most::CMOSTCaseStream& DescriptionDataType();
uint32_t DescriptionStreamLength() const;
bool DescriptionLoadNext();
bool DescriptionSaveNext();
bool UpdateShadows();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CSpeechRecognition;

class CTextToSpeech
{
	CSpeechRecognition *m_pInstance;
public:
	explicit CTextToSpeech( CSpeechRecognition *pInstance );
	~CTextToSpeech(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC04 /* = 3076 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassSequenceMethod& FunctionInstance(void);
	bool SenderHandleValue( uint16_t value );
uint16_t SenderHandleValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedWord& SenderHandleDataType();
bool LengthValue( uint16_t value );
uint16_t LengthValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedWord& LengthDataType();
bool TTSDataValue( uint8_t * value, uint32_t length );
uint8_t * TTSDataValue() const;
::k2l::acs::protocols::most::CMOSTStream& TTSDataDataType();
uint32_t TTSDataStreamLength() const;
bool ParseStartResultAck( uint32_t payloadLength, const uint8_t * payload );
bool ResultAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice );
bool ParseAbortAck( uint32_t payloadLength, const uint8_t * payload );
bool ProcessingAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint16_t senderHandle );
void SetHandler( ::k2l::acs::protocols::most::IFunctionBlockMethodHandler *pHandler );
bool ParseSenderHandle( uint32_t payloadLength, const uint8_t *payload, uint16_t *pSenderHandle );            
bool ErrorAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint16_t senderHandle, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CSpeechRecognition;

class CManualInput
{
	CSpeechRecognition *m_pInstance;
public:
	explicit CManualInput( CSpeechRecognition *pInstance );
	~CManualInput(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC05 /* = 3077 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedProperty& FunctionInstance(void);
	enum TInputTarget
{
	TInputTargetValue0 = 0,
	TInputTargetValue1 = 1,
	TInputTargetValue2 = 2,
	TInputTargetValue255 = 255,
};
bool InputTargetValue( acs::generated::fblock::SpeechRecognition::CManualInput::TInputTarget value );
acs::generated::fblock::SpeechRecognition::CManualInput::TInputTarget InputTargetValue() const;
::k2l::acs::protocols::most::CMOSTEnum& InputTargetDataType();
bool InputKeywordValue( uint8_t * value, uint32_t length );
uint8_t * InputKeywordValue() const;
::k2l::acs::protocols::most::CMOSTString& InputKeywordDataType();
uint32_t InputKeywordLength() const;
bool InputKeywordAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding );
bool InputKeywordString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes );
bool InputKeywordString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength );
bool UpdateShadows();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};

class CSpeechRecognition: public ::k2l::acs::protocols::most::CFunctionBlockBase
{
private:
	CSpeechRecognition();
	CSpeechRecognition(CSpeechRecognition& toCopy);
public:
	enum
	{
		FBlockID = 0x11 /* = 17 (decimal) */
	};

	CSpeechRecognition( ::k2l::acs::protocols::most::InstanceID_t instanceID );
	CSpeechRecognition( ::k2l::acs::protocols::most::FBlockID_t fblockID,
		k2l::acs::protocols::most::InstanceID_t instanceID );
	virtual ~CSpeechRecognition( void );

	virtual bool InitializeMOSTElement();
	inline ::k2l::acs::protocols::most::CWellknownFunctionNotificationCheck& NotificationCheckFunctionInstance() { return m_notificationCheckFunction; }
inline ::k2l::acs::protocols::most::CWellknownFunctionNotification& NotificationFunctionInstance() { return m_notificationFunction; }
inline ::k2l::acs::protocols::most::CWellknownFunctionFktIDs& FktIDsFunctionInstance() { return m_fktIDsFunction; }

private:
::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedProperty m_versionFunction;
::k2l::acs::protocols::most::CMOSTUnsignedByte m_versionMajorParameter;
::k2l::acs::protocols::most::CMOSTUnsignedByte m_versionMinorParameter;
::k2l::acs::protocols::most::CMOSTUnsignedByte m_versionBuildParameter;
::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedProperty m_fBlockInfoFunction;
::k2l::acs::protocols::most::CMOSTUnsignedWord m_fBlockInfoIDParameter;
::k2l::acs::protocols::most::CMOSTEnum m_fBlockInfoFunctionMaturityParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_fBlockInfoFunctionMaturityParameterSpec;
const static uint8_t m_fBlockInfoFunctionMaturityParameterSpecValues[6];
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription0RecordFixParameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription0RecordIteratorParameter;
::k2l::acs::protocols::most::CMOSTList m_fBlockInfoDescription0Parameter;
::k2l::acs::protocols::most::CMOSTString m_fBlockInfoFBlockNameParameter;
::k2l::acs::protocols::most::CMOSTStringSpecification m_fBlockInfoFBlockNameParameterSpec;
::k2l::acs::protocols::most::CMOSTString m_fBlockInfoSupplierVersionParameter;
::k2l::acs::protocols::most::CMOSTStringSpecification m_fBlockInfoSupplierVersionParameterSpec;
::k2l::acs::protocols::most::CMOSTString m_fBlockInfoFBlockVersionParameter;
::k2l::acs::protocols::most::CMOSTStringSpecification m_fBlockInfoFBlockVersionParameterSpec;
::k2l::acs::protocols::most::CMOSTString m_fBlockInfoMOSTVersionParameter;
::k2l::acs::protocols::most::CMOSTStringSpecification m_fBlockInfoMOSTVersionParameterSpec;
::k2l::acs::protocols::most::CMOSTString m_fBlockInfoSystemIntegratorParameter;
::k2l::acs::protocols::most::CMOSTStringSpecification m_fBlockInfoSystemIntegratorParameterSpec;
::k2l::acs::protocols::most::CMOSTString m_fBlockInfoFBlockTypeParameter;
::k2l::acs::protocols::most::CMOSTStringSpecification m_fBlockInfoFBlockTypeParameterSpec;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61440RecordFixParameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61440RecordIteratorParameter;
::k2l::acs::protocols::most::CMOSTList m_fBlockInfoDescription61440Parameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61441RecordFixParameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61441RecordIteratorParameter;
::k2l::acs::protocols::most::CMOSTList m_fBlockInfoDescription61441Parameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61442RecordFixParameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61442RecordIteratorParameter;
::k2l::acs::protocols::most::CMOSTList m_fBlockInfoDescription61442Parameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61443RecordFixParameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61443RecordIteratorParameter;
::k2l::acs::protocols::most::CMOSTList m_fBlockInfoDescription61443Parameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61444RecordFixParameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61444RecordIteratorParameter;
::k2l::acs::protocols::most::CMOSTList m_fBlockInfoDescription61444Parameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61445RecordFixParameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61445RecordIteratorParameter;
::k2l::acs::protocols::most::CMOSTList m_fBlockInfoDescription61445Parameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61446RecordFixParameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61446RecordIteratorParameter;
::k2l::acs::protocols::most::CMOSTList m_fBlockInfoDescription61446Parameter;
::k2l::acs::protocols::most::CMOSTCaseStream m_fBlockInfoDescriptionParameter;
::k2l::acs::protocols::most::CMOSTFunctionClassSequenceMethod m_textToSpeechFunction;
::k2l::acs::protocols::most::CMOSTUnsignedWord m_textToSpeechSenderHandleParameter;
::k2l::acs::protocols::most::CMOSTUnsignedWord m_textToSpeechLengthParameter;
::k2l::acs::protocols::most::CMOSTStream m_textToSpeechTTSDataParameter;
::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedProperty m_manualInputFunction;
::k2l::acs::protocols::most::CMOSTEnum m_manualInputInputTargetParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_manualInputInputTargetParameterSpec;
const static uint8_t m_manualInputInputTargetParameterSpecValues[4];
::k2l::acs::protocols::most::CMOSTString m_manualInputInputKeywordParameter;
::k2l::acs::protocols::most::CMOSTStringSpecification m_manualInputInputKeywordParameterSpec;
::k2l::acs::protocols::most::CWellknownFunctionNotificationCheck m_notificationCheckFunction;
::k2l::acs::protocols::most::CWellknownFunctionNotification m_notificationFunction;
::k2l::acs::protocols::most::CWellknownFunctionFktIDs m_fktIDsFunction;
friend class CVersion;
friend class CFBlockInfo;
friend class CTextToSpeech;
friend class CManualInput;

};
}
        }
    }
}



#endif // __DHAVN_MOSTMANAGER_SPEECHRECOGNITIONFBLOCK_H_
/*=============================================================================
 * END OF FILE
 *=============================================================================*/
