/*=!AUTO-GENERATED!============================================================
*
*     This code was generated by K2L MAG V2.3.4 at 2015-02-10.
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*     
*==!AUTO-GENERATED!============================================================*/

#ifndef __DHAVN_MOSTMANAGER_HMIFBLOCK_H_
#define __DHAVN_MOSTMANAGER_HMIFBLOCK_H_

/**
 * HMC DH Fcat v15.02.10
 **/

#include <stdint.h>
#include <K2LSystem.h>
#include <ACSStreams.h>
#include <K2LACSClient.h>
#include <K2LACSMOST.h>
#include <MOSTProtocolDefinitions.h>

#include "DHAVN_MOSTManager_HMIIBOXtoHUModeChange.h"

namespace acs
{
    namespace generated
    {
        namespace fblock
        {
namespace HMI
{

class CHMI;

class CVersion
{
	CHMI *m_pInstance;
public:
	explicit CVersion( CHMI *pInstance );
	~CVersion(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0x10 /* = 16 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedProperty& FunctionInstance(void);
	bool MajorValue( uint8_t value );
uint8_t MajorValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& MajorDataType();
bool MinorValue( uint8_t value );
uint8_t MinorValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& MinorDataType();
bool BuildValue( uint8_t value );
uint8_t BuildValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& BuildDataType();
bool UpdateShadows();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CHMI;

class CFBlockInfo
{
	CHMI *m_pInstance;
public:
	explicit CFBlockInfo( CHMI *pInstance );
	~CFBlockInfo(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0x11 /* = 17 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedProperty& FunctionInstance(void);
	bool IDValue( uint16_t value );
uint16_t IDValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedWord& IDDataType();
enum TFunctionMaturity
{
	FunctionMaturityUnknown = 0,
	FunctionMaturityInterfaceOnly = 1,
	FunctionMaturityPartlyImplemented = 2,
	FunctionMaturityFullyImplemented = 3,
	FunctionMaturityPartlyImplementedAndVerified = 17,
	FunctionMaturityFullyImplementedAndVerified = 18,
};
bool FunctionMaturityValue( acs::generated::fblock::HMI::CFBlockInfo::TFunctionMaturity value );
acs::generated::fblock::HMI::CFBlockInfo::TFunctionMaturity FunctionMaturityValue() const;
::k2l::acs::protocols::most::CMOSTEnum& FunctionMaturityDataType();
bool FBlockNameValue( uint8_t * value, uint32_t length );
uint8_t * FBlockNameValue() const;
::k2l::acs::protocols::most::CMOSTString& FBlockNameDataType();
uint32_t FBlockNameLength() const;
bool FBlockNameAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding );
bool FBlockNameString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes );
bool FBlockNameString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength );
bool SupplierVersionValue( uint8_t * value, uint32_t length );
uint8_t * SupplierVersionValue() const;
::k2l::acs::protocols::most::CMOSTString& SupplierVersionDataType();
uint32_t SupplierVersionLength() const;
bool SupplierVersionAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding );
bool SupplierVersionString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes );
bool SupplierVersionString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength );
bool FBlockVersionValue( uint8_t * value, uint32_t length );
uint8_t * FBlockVersionValue() const;
::k2l::acs::protocols::most::CMOSTString& FBlockVersionDataType();
uint32_t FBlockVersionLength() const;
bool FBlockVersionAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding );
bool FBlockVersionString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes );
bool FBlockVersionString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength );
bool MOSTVersionValue( uint8_t * value, uint32_t length );
uint8_t * MOSTVersionValue() const;
::k2l::acs::protocols::most::CMOSTString& MOSTVersionDataType();
uint32_t MOSTVersionLength() const;
bool MOSTVersionAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding );
bool MOSTVersionString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes );
bool MOSTVersionString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength );
bool SystemIntegratorValue( uint8_t * value, uint32_t length );
uint8_t * SystemIntegratorValue() const;
::k2l::acs::protocols::most::CMOSTString& SystemIntegratorDataType();
uint32_t SystemIntegratorLength() const;
bool SystemIntegratorAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding );
bool SystemIntegratorString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes );
bool SystemIntegratorString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength );
bool FBlockTypeValue( uint8_t * value, uint32_t length );
uint8_t * FBlockTypeValue() const;
::k2l::acs::protocols::most::CMOSTString& FBlockTypeDataType();
uint32_t FBlockTypeLength() const;
bool FBlockTypeAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding );
bool FBlockTypeString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes );
bool FBlockTypeString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength );
bool DescriptionValue( uint8_t * value, uint32_t length );
const uint8_t * DescriptionValue() const;
::k2l::acs::protocols::most::CMOSTCaseStream& DescriptionDataType();
uint32_t DescriptionStreamLength() const;
bool DescriptionLoadNext();
bool DescriptionSaveNext();
bool UpdateShadows();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CHMI;

class CSystemLanguage
{
	CHMI *m_pInstance;
public:
	explicit CSystemLanguage( CHMI *pInstance );
	~CSystemLanguage(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC02 /* = 3074 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedProperty& FunctionInstance(void);
	bool SystemLanguageValue( uint8_t * value, uint32_t length );
uint8_t * SystemLanguageValue() const;
::k2l::acs::protocols::most::CMOSTString& SystemLanguageDataType();
uint32_t SystemLanguageLength() const;
bool SystemLanguageAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding );
bool SystemLanguageString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes );
bool SystemLanguageString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength );
bool UpdateShadows();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CHMI;

class CSystemVolumeStatus
{
	CHMI *m_pInstance;
public:
	explicit CSystemVolumeStatus( CHMI *pInstance );
	~CSystemVolumeStatus(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC03 /* = 3075 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedProperty& FunctionInstance(void);
	enum TSourceType
{
	SourceTypeAV = 1,
	SourceTypeAUX = 2,
	SourceTypePHONE = 3,
	SourceTypeNAVIGuidance = 4,
	SourceTypeRington = 5,
	SourceTypeVR = 6,
	SourceTypeRDSTA = 7,
	SourceTypeInvalid = 255,
};
bool SourceTypeValue( acs::generated::fblock::HMI::CSystemVolumeStatus::TSourceType value );
acs::generated::fblock::HMI::CSystemVolumeStatus::TSourceType SourceTypeValue() const;
::k2l::acs::protocols::most::CMOSTEnum& SourceTypeDataType();
bool DefaultVolumeValue( uint8_t value );
uint8_t DefaultVolumeValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& DefaultVolumeDataType();
bool CurrentVolumeValue( uint8_t value );
uint8_t CurrentVolumeValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& CurrentVolumeDataType();
bool UpdateShadows();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CHMI;

class CSoundStatus
{
	CHMI *m_pInstance;
public:
	explicit CSoundStatus( CHMI *pInstance );
	~CSoundStatus(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC04 /* = 3076 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedProperty& FunctionInstance(void);
	enum TBGSound
{
	BGSoundMute = 0,
	BGSoundRadio = 17,
	BGSoundDMBCMMB = 33,
	BGSoundDAB = 39,
	BGSoundXM = 49,
	BGSoundCD = 65,
	BGSoundDVD = 81,
	BGSoundIPod = 97,
	BGSoundUSB = 98,
	BGSoundAUX = 99,
	BGSoundJukeBox = 113,
	BGSoundBluetoothPhone = 129,
	BGSoundBluetoothStreaming = 134,
	BGSoundBluelinkUVOPhone = 145,
	BGSoundDLNA = 177,
	BGSoundAppPlayer = 178,
	BGSoundWebPlayer = 179,
	BGSoundSoundOff = 238,
	BGSoundInvalid = 255,
};
bool BGSoundValue( acs::generated::fblock::HMI::CSoundStatus::TBGSound value );
acs::generated::fblock::HMI::CSoundStatus::TBGSound BGSoundValue() const;
::k2l::acs::protocols::most::CMOSTEnum& BGSoundDataType();
bool UpdateShadows();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CHMI;

class CSystemTime
{
	CHMI *m_pInstance;
public:
	explicit CSystemTime( CHMI *pInstance );
	~CSystemTime(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC07 /* = 3079 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty& FunctionInstance(void);
	enum TTimeType
{
	TimeType12H = 0,
	TimeType24H = 1,
	TimeTypeInvalid = 255,
};
bool TimeTypeValue( acs::generated::fblock::HMI::CSystemTime::TTimeType value );
acs::generated::fblock::HMI::CSystemTime::TTimeType TimeTypeValue() const;
::k2l::acs::protocols::most::CMOSTEnum& TimeTypeDataType();
bool CurrentHourValue( uint8_t value );
uint8_t CurrentHourValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& CurrentHourDataType();
bool CurrentMinValue( uint8_t value );
uint8_t CurrentMinValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& CurrentMinDataType();
bool CurrentSecValue( uint8_t value );
uint8_t CurrentSecValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& CurrentSecDataType();
bool TimezoneValue( int16_t value );
int16_t TimezoneValue() const;
::k2l::acs::protocols::most::CMOSTSignedWord& TimezoneDataType();
bool DSTValue( uint32_t value );
uint32_t DSTValue() const;
::k2l::acs::protocols::most::CMOSTBitFieldFunctionBlock30& DSTDataType();
uint8_t DSTSize() const;
bool DSTBit( uint8_t index, bool newValue );
bool DSTBit( uint8_t index ) const;
bool UpdateShadows();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CHMI;

class CSystemDate
{
	CHMI *m_pInstance;
public:
	explicit CSystemDate( CHMI *pInstance );
	~CSystemDate(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC08 /* = 3080 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty& FunctionInstance(void);
	bool CurrentYearValue( uint16_t value );
uint16_t CurrentYearValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedWord& CurrentYearDataType();
bool CurrentMonthValue( uint8_t value );
uint8_t CurrentMonthValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& CurrentMonthDataType();
bool CurrentDayValue( uint8_t value );
uint8_t CurrentDayValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& CurrentDayDataType();
enum TDateType
{
	DateTypeYYYYMMDD = 1,
	DateTypeMMDDYYYY = 2,
	DateTypeDDMMYYYY = 3,
	DateTypeYYYY = 4,
	DateTypeMM = 5,
	DateTypeDD = 6,
	DateTypeYYYY2 = 7,
	DateTypeMM2 = 8,
	DateTypeDD2 = 9,
	DateTypeInvalid = 255,
};
bool DateTypeValue( acs::generated::fblock::HMI::CSystemDate::TDateType value );
acs::generated::fblock::HMI::CSystemDate::TDateType DateTypeValue() const;
::k2l::acs::protocols::most::CMOSTEnum& DateTypeDataType();
bool UpdateShadows();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CHMI;

class CModeStatus
{
	CHMI *m_pInstance;
public:
	explicit CModeStatus( CHMI *pInstance );
	~CModeStatus(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC09 /* = 3081 (decimal) */
	};

	CModeStatusCustomClass& FunctionInstance(void);
	enum TData
{
	DataGlobalSearch = 1,
	DataHome = 2,
	DataGlobalPopup = 5,
	DataClock = 6,
	DataPhotoFrame = 7,
	DataMAP = 8,
	DataNavi = 9,
	DataClimate = 10,
        DataCamera_R = 11,
        DataVUI = 12,
        DataCamera_N = 13,
	DataFM = 17,
	DataFM1 = 18,
	DataFM2 = 19,
	DataAM = 20,
	TDataValue21 = 21,
	DataMW = 22,
	DataBSMing = 26,
	DataDMBTV = 33,
	DataDMBRadio = 34,
	DataDMB1TV = 35,
	DataDMB1Radio = 36,
	DataDMB2TV = 37,
	DataDMB2Radio = 38,
	DataDMBSearching = 42,
	DataXM = 49,
	DataXM1 = 50,
	DataXM2 = 51,
	DataXM3 = 52,
	DataCDDA = 65,
	DataVCD = 66,
	DataCDAudio = 67,
	DataCDVideo = 68,
	DataCDImage = 69,
	DataDiscReading = 74,
	DataDiscError = 75,
	DataDVDA = 81,
	DataDVDV = 82,
	DataDVDAudio = 83,
	DataDVDVideo = 84,
	DataDVDImage = 85,
	DataIPod = 97,
	DataUSB = 98,
	DataAUX = 99,
	DataUSBAudio = 100,
	DataUSBVideo = 101,
	DataUSBImage = 102,
	DataAUXAudio = 103,
	DataAUXVideo = 104,
	DataIPodReading = 106,
	DataIPodNoFile = 107,
	DataUSBReading = 108,
	DataUSBNoFile = 109,
	DataAuxNoSignal = 110,
	DataJukeBoxAudio = 113,
	DataJukeBoxVideo = 114,
	DataJukeBoxImage = 115,
	DataVirtualCDCCDDA = 116,
	DataVirtualCDCAudio = 117,
	DataMoreLikeThis = 118,
	DataBTPhoneMain = 128,
	DataBTDial = 129,
	DataBTPhonebook = 130,
	DataBTCallHistory = 131,
	DataBTFavorite = 132,
	DataBluetoothStreamingBT = 134,
	DataBTPopup = 135,
	DataModemPhoneMain = 144,
	DataModemDial = 145,
	DataModemPhonebook = 146,
	DataModemCallHistory = 147,
	DataModemFavorite = 148,
	DataProvisioning = 160,
	DataEmergencyCallSOS = 161,
	DataACN = 162,
	DataSlowdown = 163,
	DataImmobilization = 164,
	DataCenterCall = 165,
	DataBluelinkAssistant = 166,
	DataBluelink = 168,
	DataDTCAlert = 169,
	DataDrivingRestriction_Basic = 170,
	DataDrivingRestriction_DLNA = 171,
	DataTerms = 172,
	DataSignin = 173,
	DataEmail = 177,
	DataInternet = 178,
	DataDLNA = 180,
	DataDLNAList = 181,
	DataDownloadCenter = 184,
	DataMediaPlayer = 185,
	DataMusicApp = 186,
	DataRosetta = 187,
	DataDrivingInfo = 188,
	DataDailyRouteGuidance = 189,
	DataSendToCarPOI = 190,
	DataVoiceLocalSearch = 191,
	DataApplications = 193,
	DataSharedLocation = 194,
	DataSendMyLocation = 195,
	DataFindDealer = 198,
	DataVehicleDiagnostics = 199,
	DataMaintenanceAlert = 200,
	DataScheduledDiagnostics = 201,
	DataRoadsideAssist = 202,
	DataScheduleService = 203,
	DataDownloadedApps = 207,
	DataSoundSetting = 210,
	DataWiFiSetting = 212,
	DataInternetSetting = 213,
	DataAppSetting = 214,
	DataBluelinkSetting = 215,
	DataIBoxEngineeringMode = 223,
	DataPowerOff = 239,
	DataInvalid = 255,
};
bool Value( uint8_t index, acs::generated::fblock::HMI::CModeStatus::TData value );
acs::generated::fblock::HMI::CModeStatus::TData Value( uint8_t index ) const;
::k2l::acs::protocols::most::CMOSTEnum& DataTypeElement( uint8_t index );
uint32_t Size() const;
bool Size( uint32_t newSize ); 
bool UpdateShadows();
::k2l::acs::protocols::most::CMOSTArray& DataType( uint8_t index );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CHMI;

class CSystemVisibility
{
	CHMI *m_pInstance;
public:
	explicit CSystemVisibility( CHMI *pInstance );
	~CSystemVisibility(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC0A /* = 3082 (decimal) */
	};

	CSystemVisibilityCustomClass& FunctionInstance(void);
	enum TData
{
	DataDisclaimer = 0,
	DataHeadUnit = 1,
	DataNavi = 2,
	DataCamera = 17,
	DataAux = 18,
	DataRSE1 = 49,
	DataRSE2 = 50,
	DataIBox = 64,
	DataError = 254,
	DataInvalid = 255,
};
bool Value( uint8_t index, acs::generated::fblock::HMI::CSystemVisibility::TData value );
acs::generated::fblock::HMI::CSystemVisibility::TData Value( uint8_t index ) const;
::k2l::acs::protocols::most::CMOSTEnum& DataTypeElement( uint8_t index );
uint32_t Size() const;
bool Size( uint32_t newSize ); 
bool UpdateShadows();
::k2l::acs::protocols::most::CMOSTArray& DataType( uint8_t index );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CHMI;

class CSystemAudibility
{
	CHMI *m_pInstance;
public:
	explicit CSystemAudibility( CHMI *pInstance );
	~CSystemAudibility(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC0B /* = 3083 (decimal) */
	};

	CSystemAudibilityCustomClass& FunctionInstance(void);
	enum TData
{
	DataHeadUnit = 1,
	DataCamera = 17,
	DataAux = 18,
	DataRSE1 = 49,
	DataRSE2 = 50,
	DataIBoxMediaStereo = 64,
	DataIBoxMediaMono = 65,
	DataIBoxBell = 66,
	DataIBoxPhone = 67,
	DataIBoxTTS = 68,
	DataIBoxEmergencyCall = 69,
	DataIBoxAVApp = 70,
	DataError = 254,
	DataInvalid = 255,
};
bool Value( uint8_t index, acs::generated::fblock::HMI::CSystemAudibility::TData value );
acs::generated::fblock::HMI::CSystemAudibility::TData Value( uint8_t index ) const;
::k2l::acs::protocols::most::CMOSTEnum& DataTypeElement( uint8_t index );
uint32_t Size() const;
bool Size( uint32_t newSize ); 
bool UpdateShadows();
::k2l::acs::protocols::most::CMOSTArray& DataType( uint8_t index );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CHMI;

class CAdjustScreen
{
	CHMI *m_pInstance;
public:
	explicit CAdjustScreen( CHMI *pInstance );
	~CAdjustScreen(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC0C /* = 3084 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassRecord& FunctionInstance(void);
	bool DataBrightnessValue( int8_t value );
int8_t DataBrightnessValue() const;
bool DataSaturationValue( int8_t value );
int8_t DataSaturationValue() const;
bool DataContrastValue( int8_t value );
int8_t DataContrastValue() const;
bool DataHueValue( int8_t value );
int8_t DataHueValue() const;
bool UpdateShadows();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CHMI;

class CLCDBrightness
{
	CHMI *m_pInstance;
public:
	explicit CLCDBrightness( CHMI *pInstance );
	~CLCDBrightness(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC0D /* = 3085 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassArray& FunctionInstance(void);
	bool Value( uint8_t index, int8_t value );
int8_t Value( uint8_t index ) const;
::k2l::acs::protocols::most::CMOSTSignedByte& DataTypeElement( uint8_t index );
uint32_t Size() const;
bool Size( uint32_t newSize ); 
bool UpdateShadows();
::k2l::acs::protocols::most::CMOSTArray& DataType( uint8_t index );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CHMI;

class CIlluminationSetting
{
	CHMI *m_pInstance;
public:
	explicit CIlluminationSetting( CHMI *pInstance );
	~CIlluminationSetting(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC0E /* = 3086 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty& FunctionInstance(void);
	enum TIllumination
{
	IlluminationAutomatic = 0,
	IlluminationDaylight = 1,
	IlluminationNight = 2,
	IlluminationInvalid = 255,
};
bool IlluminationValue( acs::generated::fblock::HMI::CIlluminationSetting::TIllumination value );
acs::generated::fblock::HMI::CIlluminationSetting::TIllumination IlluminationValue() const;
::k2l::acs::protocols::most::CMOSTEnum& IlluminationDataType();
bool UpdateShadows();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CHMI;

class CVideoRatio
{
	CHMI *m_pInstance;
public:
	explicit CVideoRatio( CHMI *pInstance );
	~CVideoRatio(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC0F /* = 3087 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty& FunctionInstance(void);
	enum TRatio
{
	RatioNormal4 = 0,
	RatioWide16 = 1,
	RatioFullScreen = 2,
	RatioInvalid = 255,
};
bool RatioValue( acs::generated::fblock::HMI::CVideoRatio::TRatio value );
acs::generated::fblock::HMI::CVideoRatio::TRatio RatioValue() const;
::k2l::acs::protocols::most::CMOSTEnum& RatioDataType();
bool UpdateShadows();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CHMI;

class CKeyBoard
{
	CHMI *m_pInstance;
public:
	explicit CKeyBoard( CHMI *pInstance );
	~CKeyBoard(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC10 /* = 3088 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty& FunctionInstance(void);
	bool KeyBoardSettingValue( uint32_t value );
uint32_t KeyBoardSettingValue() const;
::k2l::acs::protocols::most::CMOSTBitFieldFunctionBlock30& KeyBoardSettingDataType();
uint8_t KeyBoardSettingSize() const;
bool KeyBoardSettingBit( uint8_t index, bool newValue );
bool KeyBoardSettingBit( uint8_t index ) const;
enum TKorean
{
	KoreanQwerty = 0,
	KoreanSerial = 1,
	KoreanInvalid = 255,
};
bool KoreanValue( acs::generated::fblock::HMI::CKeyBoard::TKorean value );
acs::generated::fblock::HMI::CKeyBoard::TKorean KoreanValue() const;
::k2l::acs::protocols::most::CMOSTEnum& KoreanDataType();
enum TEnglish_US
{
	English_USQwerty = 0,
	English_USSerial = 1,
	English_USInvalid = 255,
};
bool English_USValue( acs::generated::fblock::HMI::CKeyBoard::TEnglish_US value );
acs::generated::fblock::HMI::CKeyBoard::TEnglish_US English_USValue() const;
::k2l::acs::protocols::most::CMOSTEnum& English_USDataType();
enum TEnglish_EU
{
	English_EUQwerty = 0,
	English_EUSerial = 1,
	English_EUQwertz = 2,
	English_EUAzerty = 3,
	English_EUCyrillic = 4,
	English_EUInvalid = 255,
};
bool English_EUValue( acs::generated::fblock::HMI::CKeyBoard::TEnglish_EU value );
acs::generated::fblock::HMI::CKeyBoard::TEnglish_EU English_EUValue() const;
::k2l::acs::protocols::most::CMOSTEnum& English_EUDataType();
enum TChinese
{
	ChineseMandarinPinyin = 0,
	ChineseMandarinHandWriting = 1,
	ChineseCantonesePinyin = 2,
	ChineseCantoneseHandWriting = 3,
	ChineseInvalid = 255,
};
bool ChineseValue( acs::generated::fblock::HMI::CKeyBoard::TChinese value );
acs::generated::fblock::HMI::CKeyBoard::TChinese ChineseValue() const;
::k2l::acs::protocols::most::CMOSTEnum& ChineseDataType();
bool UpdateShadows();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CHMI;

class CPopUpRequest
{
	CHMI *m_pInstance;
public:
	explicit CPopUpRequest( CHMI *pInstance );
	~CPopUpRequest(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC12 /* = 3090 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassSequenceMethod& FunctionInstance(void);
	bool SenderHandleValue( uint16_t value );
uint16_t SenderHandleValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedWord& SenderHandleDataType();
enum TTarget
{
	TargetALL = 0,
	TargetFRONT = 1,
	TargetREAR1 = 2,
	TargetREAR2 = 3,
	TargetInvalid = 255,
};
bool TargetValue( acs::generated::fblock::HMI::CPopUpRequest::TTarget value );
acs::generated::fblock::HMI::CPopUpRequest::TTarget TargetValue() const;
::k2l::acs::protocols::most::CMOSTEnum& TargetDataType();
enum TDisplayHandle
{
	TDisplayHandleValue1 = 1,
	DisplayHandleStayOff = 2,
	DisplayHandleInvalid = 255,
};
bool DisplayHandleValue( acs::generated::fblock::HMI::CPopUpRequest::TDisplayHandle value );
acs::generated::fblock::HMI::CPopUpRequest::TDisplayHandle DisplayHandleValue() const;
::k2l::acs::protocols::most::CMOSTEnum& DisplayHandleDataType();
enum TPopupSize
{
	PopupSizePartial = 0,
	PopupSizeFull = 1,
	TPopupSizeValue2 = 2,
	PopupSizeInvalid = 255,
};
bool PopupSizeValue( acs::generated::fblock::HMI::CPopUpRequest::TPopupSize value );
acs::generated::fblock::HMI::CPopUpRequest::TPopupSize PopupSizeValue() const;
::k2l::acs::protocols::most::CMOSTEnum& PopupSizeDataType();
enum TPopUpType
{
	PopUpTypeNoPopup = 0,
	PopUpTypeDrivingRestriction = 1,
	PopUpTypeBatteryWarning = 2,
	PopUpTypeList = 17,
	PopUpTypeListWithoutButton = 18,
	PopUpTypeListWithoutTitle = 19,
	PopUpTypeFeedbackAlertWithoutConfirmation1 = 33,
	PopUpTypeFeedbackAlertWithoutConfirmation2 = 34,
	PopUpTypeConfirmationWithText = 49,
	PopUpTypeConfirmation = 50,
	PopUpTypeMultiSelect2Button = 51,
	PopUpTypeMultiSelect3Button = 52,
	PopUpTypeMultiSelect4Button = 53,
	PopUpTypeConfirmationWithoutTitle = 65,
	PopUpTypeConfirmationWithAnimation = 66,
	PopUpTypeConfirmationWithProgressiveBar = 67,
	PopUpTypeToastPopup = 81,
	PopUpTypeToastPopupWithProgressiveBar = 82,
	PopUpTypeInvalid = 255,
};
bool PopUpTypeValue( acs::generated::fblock::HMI::CPopUpRequest::TPopUpType value );
acs::generated::fblock::HMI::CPopUpRequest::TPopUpType PopUpTypeValue() const;
::k2l::acs::protocols::most::CMOSTEnum& PopUpTypeDataType();
bool TitleNoValue( uint8_t value );
uint8_t TitleNoValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& TitleNoDataType();
bool ListNoValue( uint8_t value );
uint8_t ListNoValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& ListNoDataType();
bool TextLineNoValue( uint8_t value );
uint8_t TextLineNoValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& TextLineNoDataType();
enum TIconID
{
	IconIDNone = 0,
	IconIDIcon1 = 1,
	IconIDIcon2 = 2,
	IconIDIcon3 = 3,
	IconIDIcon4 = 4,
	IconIDIcon5 = 5,
	IconIDIcon6 = 6,
	IconIDIcon7 = 7,
	IconIDIcon8 = 8,
	IconIDIcon9 = 9,
	IconIDIcon10 = 10,
	IconIDInvalid = 255,
};
bool IconIDValue( acs::generated::fblock::HMI::CPopUpRequest::TIconID value );
acs::generated::fblock::HMI::CPopUpRequest::TIconID IconIDValue() const;
::k2l::acs::protocols::most::CMOSTEnum& IconIDDataType();
enum TIconPosition
{
	IconPositionNone = 0,
	IconPositionLeftOfTop = 1,
	IconPositionCenterOfTop = 2,
	IconPositionRightOfTop = 3,
	IconPositionLeftOfMiddle = 4,
	IconPositionCenterOfMiddle = 5,
	IconPositionRightOfMiddle = 6,
	IconPositionLeftOfBottom = 7,
	IconPositionCenterOfBottom = 8,
	IconPositionRightOfBottom = 9,
	IconPositionInvalid = 255,
};
bool IconPositionValue( acs::generated::fblock::HMI::CPopUpRequest::TIconPosition value );
acs::generated::fblock::HMI::CPopUpRequest::TIconPosition IconPositionValue() const;
::k2l::acs::protocols::most::CMOSTEnum& IconPositionDataType();
enum TButton1
{
	Button1None = 0,
	Button1Yes = 1,
	Button1No = 2,
	Button1Ok = 3,
	Button1Cancel = 4,
	Button1Close = 5,
	Button1Accept = 17,
	Button1Reject = 18,
	Button1End = 19,
	Button1Hold1StCall = 20,
	Button1End1StCall = 21,
	Button1Ignore2NdCall = 22,
	Button1Text = 224,
	Button1Invalid = 255,
};
bool Button1Value( acs::generated::fblock::HMI::CPopUpRequest::TButton1 value );
acs::generated::fblock::HMI::CPopUpRequest::TButton1 Button1Value() const;
::k2l::acs::protocols::most::CMOSTEnum& Button1DataType();
enum TButton2
{
	Button2None = 0,
	Button2Yes = 1,
	Button2No = 2,
	Button2Ok = 3,
	Button2Cancel = 4,
	Button2Close = 5,
	Button2Accept = 17,
	Button2Reject = 18,
	Button2End = 19,
	Button2Hold1StCall = 20,
	Button2End1StCall = 21,
	Button2Ignore2NdCall = 22,
	Button2Text = 224,
	Button2Invalid = 255,
};
bool Button2Value( acs::generated::fblock::HMI::CPopUpRequest::TButton2 value );
acs::generated::fblock::HMI::CPopUpRequest::TButton2 Button2Value() const;
::k2l::acs::protocols::most::CMOSTEnum& Button2DataType();
enum TButton3
{
	Button3None = 0,
	Button3Yes = 1,
	Button3No = 2,
	Button3Ok = 3,
	Button3Cancel = 4,
	Button3Close = 5,
	Button3Accept = 17,
	Button3Reject = 18,
	Button3End = 19,
	Button3Hold1StCall = 20,
	Button3End1StCall = 21,
	Button3Ignore2NdCall = 22,
	Button3Text = 224,
	Button3Invalid = 255,
};
bool Button3Value( acs::generated::fblock::HMI::CPopUpRequest::TButton3 value );
acs::generated::fblock::HMI::CPopUpRequest::TButton3 Button3Value() const;
::k2l::acs::protocols::most::CMOSTEnum& Button3DataType();
enum TButton4
{
	Button4None = 0,
	Button4Yes = 1,
	Button4No = 2,
	Button4Ok = 3,
	Button4Cancel = 4,
	Button4Close = 5,
	Button4Accept = 17,
	Button4Reject = 18,
	Button4End = 19,
	Button4Hold1StCall = 20,
	Button4End1StCall = 21,
	Button4Ignore2NdCall = 22,
	Button4Text = 224,
	Button4Invalid = 255,
};
bool Button4Value( acs::generated::fblock::HMI::CPopUpRequest::TButton4 value );
acs::generated::fblock::HMI::CPopUpRequest::TButton4 Button4Value() const;
::k2l::acs::protocols::most::CMOSTEnum& Button4DataType();
bool PopUpDataValue( uint8_t * value, uint32_t length );
uint8_t * PopUpDataValue() const;
::k2l::acs::protocols::most::CMOSTString& PopUpDataDataType();
uint32_t PopUpDataLength() const;
bool PopUpDataAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding );
bool PopUpDataString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes );
bool PopUpDataString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength );
bool OsdTextValue( uint8_t * value, uint32_t length );
uint8_t * OsdTextValue() const;
::k2l::acs::protocols::most::CMOSTString& OsdTextDataType();
uint32_t OsdTextLength() const;
bool OsdTextAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding );
bool OsdTextString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes );
bool OsdTextString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength );
bool ParseStartResultAck( uint32_t payloadLength, const uint8_t * payload );
enum TReactionButton
{
	ReactionButtonNone = 0,
	ReactionButtonButton1 = 1,
	ReactionButtonButton2 = 2,
	ReactionButtonButton3 = 3,
	ReactionButtonButton4 = 4,
	ReactionButtonTimeout = 240,
	ReactionButtonInvalid = 255,
};
bool ReactionButtonValue( acs::generated::fblock::HMI::CPopUpRequest::TReactionButton value );
acs::generated::fblock::HMI::CPopUpRequest::TReactionButton ReactionButtonValue() const;
::k2l::acs::protocols::most::CMOSTEnum& ReactionButtonDataType();
bool ReactionListValue( uint8_t value );
uint8_t ReactionListValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& ReactionListDataType();
bool ReactionTextValue( uint8_t * value, uint32_t length );
uint8_t * ReactionTextValue() const;
::k2l::acs::protocols::most::CMOSTString& ReactionTextDataType();
uint32_t ReactionTextLength() const;
bool ReactionTextAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding );
bool ReactionTextString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes );
bool ReactionTextString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength );
bool ResultAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice );
bool ParseAbortAck( uint32_t payloadLength, const uint8_t * payload );
bool ProcessingAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint16_t senderHandle );
void SetHandler( ::k2l::acs::protocols::most::IFunctionBlockMethodHandler *pHandler );
bool ParseSenderHandle( uint32_t payloadLength, const uint8_t *payload, uint16_t *pSenderHandle );            
bool ErrorAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint16_t senderHandle, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CHMI;

class CPopUpProgressBar
{
	CHMI *m_pInstance;
public:
	explicit CPopUpProgressBar( CHMI *pInstance );
	~CPopUpProgressBar(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC13 /* = 3091 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty& FunctionInstance(void);
	bool ProgressValue( uint8_t value );
uint8_t ProgressValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& ProgressDataType();
bool UpdateShadows();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CHMI;

class CDisplayControl
{
	CHMI *m_pInstance;
public:
	explicit CDisplayControl( CHMI *pInstance );
	~CDisplayControl(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC14 /* = 3092 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassBitSet& FunctionInstance(void);
	bool UpdateShadows();
bool Value( uint32_t value );
uint32_t Value() const;
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CHMI;

class CDisplayOSD
{
	CHMI *m_pInstance;
public:
	explicit CDisplayOSD( CHMI *pInstance );
	~CDisplayOSD(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC15 /* = 3093 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedProperty& FunctionInstance(void);
	enum TTarget
{
	TargetALL = 0,
	TargetFRONT = 1,
	TargetREAR1 = 2,
	TargetREAR2 = 3,
	TargetInvalid = 255,
};
bool TargetValue( acs::generated::fblock::HMI::CDisplayOSD::TTarget value );
acs::generated::fblock::HMI::CDisplayOSD::TTarget TargetValue() const;
::k2l::acs::protocols::most::CMOSTEnum& TargetDataType();
bool OsdIdValue( uint8_t value );
uint8_t OsdIdValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& OsdIdDataType();
enum TOsdControl
{
	OsdControlNone = 0,
	OsdControlOpenOneShotOSD = 1,
	OsdControlOpenOngoingOSD = 2,
	OsdControlClearOSD = 17,
	TOsdControlValue255 = 255,
};
bool OsdControlValue( acs::generated::fblock::HMI::CDisplayOSD::TOsdControl value );
acs::generated::fblock::HMI::CDisplayOSD::TOsdControl OsdControlValue() const;
::k2l::acs::protocols::most::CMOSTEnum& OsdControlDataType();
enum TOsdMode
{
	OsdModeNone = 0,
	OsdModeFM1 = 18,
	OsdModeFM2 = 19,
	OsdModeAM = 20,
	OsdModeDMB1TV = 35,
	OsdModeDMB1Radio = 36,
	OsdModeDMB2TV = 37,
	OsdModeDMB2Radio = 38,
	OsdModeXM = 49,
	OsdModeDiscCD = 64,
	OsdModeDiscDVD = 75,
	OsdModeIPod = 97,
	OsdModeAUX = 99,
	OsdModeUSBAudio = 100,
	OsdModeUSBVideo = 101,
	OsdModeUSBImage = 102,
	OsdModeAUXAudio = 103,
	OsdModeAUXVideo = 104,
	OsdModeJukeBoxAudio = 113,
	OsdModeJukeBoxVideo = 114,
	OsdModeJukeBoxImage = 115,
	OsdModeBluetoothStreamingBT = 134,
	OsdModeBluelink = 144,
	OsdModeDLNA = 176,
	OsdModeDLNAAudio = 177,
	OsdModeDLNA_Video = 178,
	OsdModeDLNA_Image = 179,
	OsdModeApplication = 193,
	OsdModeAVVolume = 216,
	OsdModeAUXVolume = 217,
	OsdModePhoneVolume = 218,
	OsdModeNaviVolume = 219,
	OsdModeVRVolume = 220,
	OsdModeBellVolume = 221,
	OsdModeInvalid = 255,
};
bool OsdModeValue( acs::generated::fblock::HMI::CDisplayOSD::TOsdMode value );
acs::generated::fblock::HMI::CDisplayOSD::TOsdMode OsdModeValue() const;
::k2l::acs::protocols::most::CMOSTEnum& OsdModeDataType();
enum TTextColor
{
	TextColorNone = 0,
	TextColorNormal = 1,
	TextColorTuning = 2,
	TTextColorValue255 = 255,
};
bool TextColorValue( acs::generated::fblock::HMI::CDisplayOSD::TTextColor value );
acs::generated::fblock::HMI::CDisplayOSD::TTextColor TextColorValue() const;
::k2l::acs::protocols::most::CMOSTEnum& TextColorDataType();
bool OsdTextValue( uint8_t * value, uint32_t length );
uint8_t * OsdTextValue() const;
::k2l::acs::protocols::most::CMOSTString& OsdTextDataType();
uint32_t OsdTextLength() const;
bool OsdTextAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding );
bool OsdTextString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes );
bool OsdTextString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength );
enum TOsdStatus
{
	OsdStatusNotDisplayedAtAll = 0,
	OsdStatusDisplayedAtTheFront = 1,
	OsdStatusDisplayedAtTheRear = 2,
	OsdStatusDisplayedAtBoth = 3,
	OsdStatusInvalid = 255,
};
bool OsdStatusValue( acs::generated::fblock::HMI::CDisplayOSD::TOsdStatus value );
acs::generated::fblock::HMI::CDisplayOSD::TOsdStatus OsdStatusValue() const;
::k2l::acs::protocols::most::CMOSTEnum& OsdStatusDataType();
bool UpdateShadows();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CHMI;

class CVideoDefaultSet
{
	CHMI *m_pInstance;
public:
	explicit CVideoDefaultSet( CHMI *pInstance );
	~CVideoDefaultSet(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC16 /* = 3094 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedMethod& FunctionInstance(void);
	bool SenderHandleValue( uint16_t value );
uint16_t SenderHandleValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedWord& SenderHandleDataType();
enum TVSetTarget
{
	VSetTargetAll = 0,
	VSetTargetAdjustScreen = 1,
	VSetTargetLCDBrightness = 2,
	VSetTargetIlluminationSetting = 3,
	VSetTargetVideoRatio = 4,
	VSetTargetDisplayOnOff = 5,
	VSetTargetInvalid = 255,
};
bool VSetTargetValue( acs::generated::fblock::HMI::CVideoDefaultSet::TVSetTarget value );
acs::generated::fblock::HMI::CVideoDefaultSet::TVSetTarget VSetTargetValue() const;
::k2l::acs::protocols::most::CMOSTEnum& VSetTargetDataType();
bool ParseStartResultAck( uint32_t payloadLength, const uint8_t * payload );
bool ParseAbortAck( uint32_t payloadLength, const uint8_t * payload );
bool ResultAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice );
bool ProcessingAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint16_t senderHandle );
void SetHandler( ::k2l::acs::protocols::most::IFunctionBlockMethodHandler *pHandler );
bool ParseSenderHandle( uint32_t payloadLength, const uint8_t *payload, uint16_t *pSenderHandle );            
bool ErrorAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint16_t senderHandle, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CHMI;

class CDistanceUnit
{
	CHMI *m_pInstance;
public:
	explicit CDistanceUnit( CHMI *pInstance );
	~CDistanceUnit(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC17 /* = 3095 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty& FunctionInstance(void);
	enum TDistanceUnit
{
	DistanceUnitKm = 0,
	DistanceUnitMile = 1,
	DistanceUnitInvalid = 255,
};
bool DistanceUnitValue( acs::generated::fblock::HMI::CDistanceUnit::TDistanceUnit value );
acs::generated::fblock::HMI::CDistanceUnit::TDistanceUnit DistanceUnitValue() const;
::k2l::acs::protocols::most::CMOSTEnum& DistanceUnitDataType();
bool UpdateShadows();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CHMI;

class CShowStatusBar
{
	CHMI *m_pInstance;
public:
	explicit CShowStatusBar( CHMI *pInstance );
	~CShowStatusBar(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC18 /* = 3096 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty& FunctionInstance(void);
	enum TStatusBar
{
	StatusBarHide = 0,
	StatusBarShow = 1,
	StatusBarInvalid = 255,
};
bool StatusBarValue( acs::generated::fblock::HMI::CShowStatusBar::TStatusBar value );
acs::generated::fblock::HMI::CShowStatusBar::TStatusBar StatusBarValue() const;
::k2l::acs::protocols::most::CMOSTEnum& StatusBarDataType();
bool UpdateShadows();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CHMI;

class CEmergencySet
{
	CHMI *m_pInstance;
public:
	explicit CEmergencySet( CHMI *pInstance );
	~CEmergencySet(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC19 /* = 3097 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty& FunctionInstance(void);
	enum TEMGCState
{
	EMGCStateOFF = 0,
	EMGCStateACN = 1,
	EMGCStateVehicleImmobilization = 2,
	EMGCStateSOS = 3,
	EMGCStateAutoDTCNotice = 4,
	EMGCStateProvisioning = 5,
	EMGCStateVehicleChasing = 6,
	EMGCStateRoadsideAssist = 7,
	EMGCStateInvalid = 255,
};
bool EMGCStateValue( acs::generated::fblock::HMI::CEmergencySet::TEMGCState value );
acs::generated::fblock::HMI::CEmergencySet::TEMGCState EMGCStateValue() const;
::k2l::acs::protocols::most::CMOSTEnum& EMGCStateDataType();
enum TControllerLock
{
	ControllerLockUnlock = 0,
	ControllerLockLock = 1,
	ControllerLockInvalid = 255,
};
bool ControllerLockValue( acs::generated::fblock::HMI::CEmergencySet::TControllerLock value );
acs::generated::fblock::HMI::CEmergencySet::TControllerLock ControllerLockValue() const;
::k2l::acs::protocols::most::CMOSTEnum& ControllerLockDataType();
enum TSoundLock
{
	SoundLockUnlock = 0,
	SoundLockLock = 1,
	SoundLockInvalid = 255,
};
bool SoundLockValue( acs::generated::fblock::HMI::CEmergencySet::TSoundLock value );
acs::generated::fblock::HMI::CEmergencySet::TSoundLock SoundLockValue() const;
::k2l::acs::protocols::most::CMOSTEnum& SoundLockDataType();
bool UpdateShadows();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CHMI;

class CKeyInputStatus
{
	CHMI *m_pInstance;
public:
	explicit CKeyInputStatus( CHMI *pInstance );
	~CKeyInputStatus(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC1A /* = 3098 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedProperty& FunctionInstance(void);
	bool HardKeyValue( uint8_t value );
uint8_t HardKeyValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& HardKeyDataType();
bool SoftKeyValue( uint8_t value );
uint8_t SoftKeyValue() const;
::k2l::acs::protocols::most::CMOSTUnsignedByte& SoftKeyDataType();
bool UpdateShadows();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CHMI;

class CBeepSetting
{
	CHMI *m_pInstance;
public:
	explicit CBeepSetting( CHMI *pInstance );
	~CBeepSetting(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC1B /* = 3099 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty& FunctionInstance(void);
	enum TBeepSetting
{
	BeepSettingOff = 0,
	BeepSettingOn = 1,
	BeepSettingInvaild = 255,
};
bool BeepSettingValue( acs::generated::fblock::HMI::CBeepSetting::TBeepSetting value );
acs::generated::fblock::HMI::CBeepSetting::TBeepSetting BeepSettingValue() const;
::k2l::acs::protocols::most::CMOSTEnum& BeepSettingDataType();
bool UpdateShadows();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CHMI;

class CDrivingRestriction
{
	CHMI *m_pInstance;
public:
	explicit CDrivingRestriction( CHMI *pInstance );
	~CDrivingRestriction(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC1C /* = 3100 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassSwitch& FunctionInstance(void);
	bool UpdateShadows();
bool Value( bool value );
bool Value() const;
::k2l::acs::protocols::most::CMOSTBoolean& DataType();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CHMI;

class CPhonePriority
{
	CHMI *m_pInstance;
public:
	explicit CPhonePriority( CHMI *pInstance );
	~CPhonePriority(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC1D /* = 3101 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassEnumeration& FunctionInstance(void);
	enum TPhonePriority
{
	PhonePriorityBluetoothPhone = 1,
	PhonePriorityBlueLinkPhone = 2,
	PhonePriorityInvalid = 255,
};
bool UpdateShadows();
bool Value( acs::generated::fblock::HMI::CPhonePriority::TPhonePriority value );
acs::generated::fblock::HMI::CPhonePriority::TPhonePriority Value() const;
::k2l::acs::protocols::most::CMOSTEnum& DataType();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CHMI;

class CSystemDefaultSet
{
	CHMI *m_pInstance;
public:
	explicit CSystemDefaultSet( CHMI *pInstance );
	~CSystemDefaultSet(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC1E /* = 3102 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassTrigger& FunctionInstance(void);
	bool ProcessingAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint16_t senderHandle );
bool ResultAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint16_t senderHandle );
void SetHandler( ::k2l::acs::protocols::most::IFunctionBlockMethodHandler *pHandler );
bool ParseSenderHandle( uint32_t payloadLength, const uint8_t *payload, uint16_t *pSenderHandle );
bool ErrorAck( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint16_t senderHandle, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};


class CHMI;

class CMuteControl
{
	CHMI *m_pInstance;
public:
	explicit CMuteControl( CHMI *pInstance );
	~CMuteControl(void);

	void SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener);
	bool RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener);

	enum
	{
		FunctionID = 0xC1F /* = 3103 (decimal) */
	};

	::k2l::acs::protocols::most::CMOSTFunctionClassSwitch& FunctionInstance(void);
	bool UpdateShadows();
bool Value( bool value );
bool Value() const;
::k2l::acs::protocols::most::CMOSTBoolean& DataType();
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t *payload );
bool Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo );            

};

class CHMI: public ::k2l::acs::protocols::most::CFunctionBlockBase
{
private:
	CHMI();
	CHMI(CHMI& toCopy);
public:
	enum
	{
		FBlockID = 0x10 /* = 16 (decimal) */
	};

	CHMI( ::k2l::acs::protocols::most::InstanceID_t instanceID );
	CHMI( ::k2l::acs::protocols::most::FBlockID_t fblockID,
		k2l::acs::protocols::most::InstanceID_t instanceID );
	virtual ~CHMI( void );

	virtual bool InitializeMOSTElement();
	inline ::k2l::acs::protocols::most::CWellknownFunctionNotificationCheck& NotificationCheckFunctionInstance() { return m_notificationCheckFunction; }
inline ::k2l::acs::protocols::most::CWellknownFunctionNotification& NotificationFunctionInstance() { return m_notificationFunction; }
inline ::k2l::acs::protocols::most::CWellknownFunctionFktIDs& FktIDsFunctionInstance() { return m_fktIDsFunction; }

private:
::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedProperty m_versionFunction;
::k2l::acs::protocols::most::CMOSTUnsignedByte m_versionMajorParameter;
::k2l::acs::protocols::most::CMOSTUnsignedByte m_versionMinorParameter;
::k2l::acs::protocols::most::CMOSTUnsignedByte m_versionBuildParameter;
::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedProperty m_fBlockInfoFunction;
::k2l::acs::protocols::most::CMOSTUnsignedWord m_fBlockInfoIDParameter;
::k2l::acs::protocols::most::CMOSTEnum m_fBlockInfoFunctionMaturityParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_fBlockInfoFunctionMaturityParameterSpec;
const static uint8_t m_fBlockInfoFunctionMaturityParameterSpecValues[6];
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription0RecordFixParameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription0RecordIteratorParameter;
::k2l::acs::protocols::most::CMOSTList m_fBlockInfoDescription0Parameter;
::k2l::acs::protocols::most::CMOSTString m_fBlockInfoFBlockNameParameter;
::k2l::acs::protocols::most::CMOSTStringSpecification m_fBlockInfoFBlockNameParameterSpec;
::k2l::acs::protocols::most::CMOSTString m_fBlockInfoSupplierVersionParameter;
::k2l::acs::protocols::most::CMOSTStringSpecification m_fBlockInfoSupplierVersionParameterSpec;
::k2l::acs::protocols::most::CMOSTString m_fBlockInfoFBlockVersionParameter;
::k2l::acs::protocols::most::CMOSTStringSpecification m_fBlockInfoFBlockVersionParameterSpec;
::k2l::acs::protocols::most::CMOSTString m_fBlockInfoMOSTVersionParameter;
::k2l::acs::protocols::most::CMOSTStringSpecification m_fBlockInfoMOSTVersionParameterSpec;
::k2l::acs::protocols::most::CMOSTString m_fBlockInfoSystemIntegratorParameter;
::k2l::acs::protocols::most::CMOSTStringSpecification m_fBlockInfoSystemIntegratorParameterSpec;
::k2l::acs::protocols::most::CMOSTString m_fBlockInfoFBlockTypeParameter;
::k2l::acs::protocols::most::CMOSTStringSpecification m_fBlockInfoFBlockTypeParameterSpec;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61440RecordFixParameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61440RecordIteratorParameter;
::k2l::acs::protocols::most::CMOSTList m_fBlockInfoDescription61440Parameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61441RecordFixParameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61441RecordIteratorParameter;
::k2l::acs::protocols::most::CMOSTList m_fBlockInfoDescription61441Parameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61442RecordFixParameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61442RecordIteratorParameter;
::k2l::acs::protocols::most::CMOSTList m_fBlockInfoDescription61442Parameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61443RecordFixParameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61443RecordIteratorParameter;
::k2l::acs::protocols::most::CMOSTList m_fBlockInfoDescription61443Parameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61444RecordFixParameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61444RecordIteratorParameter;
::k2l::acs::protocols::most::CMOSTList m_fBlockInfoDescription61444Parameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61445RecordFixParameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61445RecordIteratorParameter;
::k2l::acs::protocols::most::CMOSTList m_fBlockInfoDescription61445Parameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61446RecordFixParameter;
::k2l::acs::protocols::most::CMOSTRecord m_fBlockInfoDescription61446RecordIteratorParameter;
::k2l::acs::protocols::most::CMOSTList m_fBlockInfoDescription61446Parameter;
::k2l::acs::protocols::most::CMOSTCaseStream m_fBlockInfoDescriptionParameter;
::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedProperty m_systemLanguageFunction;
::k2l::acs::protocols::most::CMOSTString m_systemLanguageParameter;
::k2l::acs::protocols::most::CMOSTStringSpecification m_systemLanguageParameterSpec;
::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedProperty m_systemVolumeStatusFunction;
::k2l::acs::protocols::most::CMOSTEnum m_systemVolumeStatusSourceTypeParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_systemVolumeStatusSourceTypeParameterSpec;
const static uint8_t m_systemVolumeStatusSourceTypeParameterSpecValues[8];
::k2l::acs::protocols::most::CMOSTUnsignedByte m_systemVolumeStatusDefaultVolumeParameter;
::k2l::acs::protocols::most::CNumberSpecificationUnsignedByte m_systemVolumeStatusDefaultVolumeParameterSpec;
::k2l::acs::protocols::most::CMOSTUnsignedByte m_systemVolumeStatusCurrentVolumeParameter;
::k2l::acs::protocols::most::CNumberSpecificationUnsignedByte m_systemVolumeStatusCurrentVolumeParameterSpec;
::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedProperty m_soundStatusFunction;
::k2l::acs::protocols::most::CMOSTEnum m_soundStatusBGSoundParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_soundStatusBGSoundParameterSpec;
const static uint8_t m_soundStatusBGSoundParameterSpecValues[19];
::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty m_systemTimeFunction;
::k2l::acs::protocols::most::CMOSTEnum m_systemTimeTimeTypeParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_systemTimeTimeTypeParameterSpec;
const static uint8_t m_systemTimeTimeTypeParameterSpecValues[3];
::k2l::acs::protocols::most::CMOSTUnsignedByte m_systemTimeCurrentHourParameter;
::k2l::acs::protocols::most::CNumberSpecificationUnsignedByte m_systemTimeCurrentHourParameterSpec;
::k2l::acs::protocols::most::CMOSTUnsignedByte m_systemTimeCurrentMinParameter;
::k2l::acs::protocols::most::CNumberSpecificationUnsignedByte m_systemTimeCurrentMinParameterSpec;
::k2l::acs::protocols::most::CMOSTUnsignedByte m_systemTimeCurrentSecParameter;
::k2l::acs::protocols::most::CNumberSpecificationUnsignedByte m_systemTimeCurrentSecParameterSpec;
::k2l::acs::protocols::most::CMOSTSignedWord m_systemTimeTimezoneParameter;
::k2l::acs::protocols::most::CNumberSpecificationSignedWord m_systemTimeTimezoneParameterSpec;
::k2l::acs::protocols::most::CMOSTBitFieldFunctionBlock30 m_systemTimeDSTParameter;
::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty m_systemDateFunction;
::k2l::acs::protocols::most::CMOSTUnsignedWord m_systemDateCurrentYearParameter;
::k2l::acs::protocols::most::CMOSTUnsignedByte m_systemDateCurrentMonthParameter;
::k2l::acs::protocols::most::CNumberSpecificationUnsignedByte m_systemDateCurrentMonthParameterSpec;
::k2l::acs::protocols::most::CMOSTUnsignedByte m_systemDateCurrentDayParameter;
::k2l::acs::protocols::most::CNumberSpecificationUnsignedByte m_systemDateCurrentDayParameterSpec;
::k2l::acs::protocols::most::CMOSTEnum m_systemDateDateTypeParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_systemDateDateTypeParameterSpec;
const static uint8_t m_systemDateDateTypeParameterSpecValues[10];
CModeStatusCustomClass m_modeStatusFunction;
::k2l::acs::protocols::most::CMOSTEnum m_modeStatusDataParameter[3];
::k2l::acs::protocols::most::CMOSTEnumSpecification m_modeStatusDataParameterSpec;
const static uint8_t m_modeStatusDataParameterSpecValues[115];
CSystemVisibilityCustomClass m_systemVisibilityFunction;
::k2l::acs::protocols::most::CMOSTEnum m_systemVisibilityDataParameter[3];
::k2l::acs::protocols::most::CMOSTEnumSpecification m_systemVisibilityDataParameterSpec;
const static uint8_t m_systemVisibilityDataParameterSpecValues[10];
CSystemAudibilityCustomClass m_systemAudibilityFunction;
::k2l::acs::protocols::most::CMOSTEnum m_systemAudibilityDataParameter[3];
::k2l::acs::protocols::most::CMOSTEnumSpecification m_systemAudibilityDataParameterSpec;
const static uint8_t m_systemAudibilityDataParameterSpecValues[14];
::k2l::acs::protocols::most::CMOSTFunctionClassRecord m_adjustScreenFunction;
::k2l::acs::protocols::most::CMOSTSignedByte m_adjustScreenDataBrightnessParameter;
::k2l::acs::protocols::most::CNumberSpecificationSignedByte m_adjustScreenDataBrightnessParameterSpec;
::k2l::acs::protocols::most::CMOSTSignedByte m_adjustScreenDataSaturationParameter;
::k2l::acs::protocols::most::CNumberSpecificationSignedByte m_adjustScreenDataSaturationParameterSpec;
::k2l::acs::protocols::most::CMOSTSignedByte m_adjustScreenDataContrastParameter;
::k2l::acs::protocols::most::CNumberSpecificationSignedByte m_adjustScreenDataContrastParameterSpec;
::k2l::acs::protocols::most::CMOSTSignedByte m_adjustScreenDataHueParameter;
::k2l::acs::protocols::most::CNumberSpecificationSignedByte m_adjustScreenDataHueParameterSpec;
::k2l::acs::protocols::most::CMOSTFunctionClassArray m_lCDBrightnessFunction;
::k2l::acs::protocols::most::CMOSTSignedByte m_lCDBrightnessDataParameter[3];
::k2l::acs::protocols::most::CNumberSpecificationSignedByte m_lCDBrightnessDataParameterSpec;
::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty m_illuminationSettingFunction;
::k2l::acs::protocols::most::CMOSTEnum m_illuminationSettingIlluminationParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_illuminationSettingIlluminationParameterSpec;
const static uint8_t m_illuminationSettingIlluminationParameterSpecValues[4];
::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty m_videoRatioFunction;
::k2l::acs::protocols::most::CMOSTEnum m_videoRatioRatioParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_videoRatioRatioParameterSpec;
const static uint8_t m_videoRatioRatioParameterSpecValues[4];
::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty m_keyBoardFunction;
::k2l::acs::protocols::most::CMOSTBitFieldFunctionBlock30 m_keyBoardKeyBoardSettingParameter;
::k2l::acs::protocols::most::CMOSTEnum m_keyBoardKoreanParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_keyBoardKoreanParameterSpec;
const static uint8_t m_keyBoardKoreanParameterSpecValues[3];
::k2l::acs::protocols::most::CMOSTEnum m_keyBoardEnglish_USParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_keyBoardEnglish_USParameterSpec;
const static uint8_t m_keyBoardEnglish_USParameterSpecValues[3];
::k2l::acs::protocols::most::CMOSTEnum m_keyBoardEnglish_EUParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_keyBoardEnglish_EUParameterSpec;
const static uint8_t m_keyBoardEnglish_EUParameterSpecValues[6];
::k2l::acs::protocols::most::CMOSTEnum m_keyBoardChineseParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_keyBoardChineseParameterSpec;
const static uint8_t m_keyBoardChineseParameterSpecValues[5];
::k2l::acs::protocols::most::CMOSTFunctionClassSequenceMethod m_popUpRequestFunction;
::k2l::acs::protocols::most::CMOSTUnsignedWord m_popUpRequestSenderHandleParameter;
::k2l::acs::protocols::most::CMOSTEnum m_popUpRequestTargetParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_popUpRequestTargetParameterSpec;
const static uint8_t m_popUpRequestTargetParameterSpecValues[5];
::k2l::acs::protocols::most::CMOSTEnum m_popUpRequestDisplayHandleParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_popUpRequestDisplayHandleParameterSpec;
const static uint8_t m_popUpRequestDisplayHandleParameterSpecValues[3];
::k2l::acs::protocols::most::CMOSTEnum m_popUpRequestPopupSizeParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_popUpRequestPopupSizeParameterSpec;
const static uint8_t m_popUpRequestPopupSizeParameterSpecValues[4];
::k2l::acs::protocols::most::CMOSTEnum m_popUpRequestPopUpTypeParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_popUpRequestPopUpTypeParameterSpec;
const static uint8_t m_popUpRequestPopUpTypeParameterSpecValues[19];
::k2l::acs::protocols::most::CMOSTUnsignedByte m_popUpRequestTitleNoParameter;
::k2l::acs::protocols::most::CMOSTUnsignedByte m_popUpRequestListNoParameter;
::k2l::acs::protocols::most::CMOSTUnsignedByte m_popUpRequestTextLineNoParameter;
::k2l::acs::protocols::most::CMOSTEnum m_popUpRequestIconIDParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_popUpRequestIconIDParameterSpec;
const static uint8_t m_popUpRequestIconIDParameterSpecValues[12];
::k2l::acs::protocols::most::CMOSTEnum m_popUpRequestIconPositionParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_popUpRequestIconPositionParameterSpec;
const static uint8_t m_popUpRequestIconPositionParameterSpecValues[11];
::k2l::acs::protocols::most::CMOSTEnum m_popUpRequestButton1Parameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_popUpRequestButton1ParameterSpec;
const static uint8_t m_popUpRequestButton1ParameterSpecValues[14];
::k2l::acs::protocols::most::CMOSTEnum m_popUpRequestButton2Parameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_popUpRequestButton2ParameterSpec;
const static uint8_t m_popUpRequestButton2ParameterSpecValues[14];
::k2l::acs::protocols::most::CMOSTEnum m_popUpRequestButton3Parameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_popUpRequestButton3ParameterSpec;
const static uint8_t m_popUpRequestButton3ParameterSpecValues[14];
::k2l::acs::protocols::most::CMOSTEnum m_popUpRequestButton4Parameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_popUpRequestButton4ParameterSpec;
const static uint8_t m_popUpRequestButton4ParameterSpecValues[14];
::k2l::acs::protocols::most::CMOSTString m_popUpRequestPopUpDataParameter;
::k2l::acs::protocols::most::CMOSTStringSpecification m_popUpRequestPopUpDataParameterSpec;
::k2l::acs::protocols::most::CMOSTString m_popUpRequestOsdTextParameter;
::k2l::acs::protocols::most::CMOSTStringSpecification m_popUpRequestOsdTextParameterSpec;
::k2l::acs::protocols::most::CMOSTEnum m_popUpRequestReactionButtonParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_popUpRequestReactionButtonParameterSpec;
const static uint8_t m_popUpRequestReactionButtonParameterSpecValues[7];
::k2l::acs::protocols::most::CMOSTUnsignedByte m_popUpRequestReactionListParameter;
::k2l::acs::protocols::most::CMOSTString m_popUpRequestReactionTextParameter;
::k2l::acs::protocols::most::CMOSTStringSpecification m_popUpRequestReactionTextParameterSpec;
::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty m_popUpProgressBarFunction;
::k2l::acs::protocols::most::CMOSTUnsignedByte m_popUpProgressBarProgressParameter;
::k2l::acs::protocols::most::CNumberSpecificationUnsignedByte m_popUpProgressBarProgressParameterSpec;
::k2l::acs::protocols::most::CMOSTFunctionClassBitSet m_displayControlFunction;
::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedProperty m_displayOSDFunction;
::k2l::acs::protocols::most::CMOSTEnum m_displayOSDTargetParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_displayOSDTargetParameterSpec;
const static uint8_t m_displayOSDTargetParameterSpecValues[5];
::k2l::acs::protocols::most::CMOSTUnsignedByte m_displayOSDOsdIdParameter;
::k2l::acs::protocols::most::CNumberSpecificationUnsignedByte m_displayOSDOsdIdParameterSpec;
::k2l::acs::protocols::most::CMOSTEnum m_displayOSDOsdControlParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_displayOSDOsdControlParameterSpec;
const static uint8_t m_displayOSDOsdControlParameterSpecValues[5];
::k2l::acs::protocols::most::CMOSTEnum m_displayOSDOsdModeParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_displayOSDOsdModeParameterSpec;
const static uint8_t m_displayOSDOsdModeParameterSpecValues[35];
::k2l::acs::protocols::most::CMOSTEnum m_displayOSDTextColorParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_displayOSDTextColorParameterSpec;
const static uint8_t m_displayOSDTextColorParameterSpecValues[4];
::k2l::acs::protocols::most::CMOSTString m_displayOSDOsdTextParameter;
::k2l::acs::protocols::most::CMOSTStringSpecification m_displayOSDOsdTextParameterSpec;
::k2l::acs::protocols::most::CMOSTEnum m_displayOSDOsdStatusParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_displayOSDOsdStatusParameterSpec;
const static uint8_t m_displayOSDOsdStatusParameterSpecValues[5];
::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedMethod m_videoDefaultSetFunction;
::k2l::acs::protocols::most::CMOSTUnsignedWord m_videoDefaultSetSenderHandleParameter;
::k2l::acs::protocols::most::CMOSTEnum m_videoDefaultSetVSetTargetParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_videoDefaultSetVSetTargetParameterSpec;
const static uint8_t m_videoDefaultSetVSetTargetParameterSpecValues[7];
::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty m_distanceUnitFunction;
::k2l::acs::protocols::most::CMOSTEnum m_distanceUnitParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_distanceUnitParameterSpec;
const static uint8_t m_distanceUnitParameterSpecValues[3];
::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty m_showStatusBarFunction;
::k2l::acs::protocols::most::CMOSTEnum m_showStatusBarStatusBarParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_showStatusBarStatusBarParameterSpec;
const static uint8_t m_showStatusBarStatusBarParameterSpecValues[3];
::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty m_emergencySetFunction;
::k2l::acs::protocols::most::CMOSTEnum m_emergencySetEMGCStateParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_emergencySetEMGCStateParameterSpec;
const static uint8_t m_emergencySetEMGCStateParameterSpecValues[9];
::k2l::acs::protocols::most::CMOSTEnum m_emergencySetControllerLockParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_emergencySetControllerLockParameterSpec;
const static uint8_t m_emergencySetControllerLockParameterSpecValues[3];
::k2l::acs::protocols::most::CMOSTEnum m_emergencySetSoundLockParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_emergencySetSoundLockParameterSpec;
const static uint8_t m_emergencySetSoundLockParameterSpecValues[3];
::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedProperty m_keyInputStatusFunction;
::k2l::acs::protocols::most::CMOSTUnsignedByte m_keyInputStatusHardKeyParameter;
::k2l::acs::protocols::most::CMOSTUnsignedByte m_keyInputStatusSoftKeyParameter;
::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty m_beepSettingFunction;
::k2l::acs::protocols::most::CMOSTEnum m_beepSettingParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_beepSettingParameterSpec;
const static uint8_t m_beepSettingParameterSpecValues[3];
::k2l::acs::protocols::most::CMOSTFunctionClassSwitch m_drivingRestrictionFunction;
::k2l::acs::protocols::most::CMOSTBoolean m_drivingRestrictionNeedParameter;
::k2l::acs::protocols::most::CMOSTFunctionClassEnumeration m_phonePriorityFunction;
::k2l::acs::protocols::most::CMOSTEnum m_phonePriorityParameter;
::k2l::acs::protocols::most::CMOSTEnumSpecification m_phonePriorityParameterSpec;
const static uint8_t m_phonePriorityParameterSpecValues[3];
::k2l::acs::protocols::most::CMOSTFunctionClassTrigger m_systemDefaultSetFunction;
::k2l::acs::protocols::most::CMOSTFunctionClassSwitch m_muteControlFunction;
::k2l::acs::protocols::most::CMOSTBoolean m_muteControlMuteStatusParameter;
::k2l::acs::protocols::most::CWellknownFunctionNotificationCheck m_notificationCheckFunction;
::k2l::acs::protocols::most::CWellknownFunctionNotification m_notificationFunction;
::k2l::acs::protocols::most::CWellknownFunctionFktIDs m_fktIDsFunction;
friend class CVersion;
friend class CFBlockInfo;
friend class CSystemLanguage;
friend class CSystemVolumeStatus;
friend class CSoundStatus;
friend class CSystemTime;
friend class CSystemDate;
friend class CModeStatus;
friend class CSystemVisibility;
friend class CSystemAudibility;
friend class CAdjustScreen;
friend class CLCDBrightness;
friend class CIlluminationSetting;
friend class CVideoRatio;
friend class CKeyBoard;
friend class CPopUpRequest;
friend class CPopUpProgressBar;
friend class CDisplayControl;
friend class CDisplayOSD;
friend class CVideoDefaultSet;
friend class CDistanceUnit;
friend class CShowStatusBar;
friend class CEmergencySet;
friend class CKeyInputStatus;
friend class CBeepSetting;
friend class CDrivingRestriction;
friend class CPhonePriority;
friend class CSystemDefaultSet;
friend class CMuteControl;

};
}
        }
    }
}



#endif // __DHAVN_MOSTMANAGER_HMIFBLOCK_H_
/*=============================================================================
 * END OF FILE
 *=============================================================================*/
