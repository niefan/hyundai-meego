/*=!AUTO-GENERATED!============================================================
*
*     This code was generated by K2L MAG V2.3.4 at 2013-09-21.
*
*     Changes to this file may cause incorrect behavior and will be lost if
*     the code is regenerated.
*     
*==!AUTO-GENERATED!============================================================*/

/**
 * HMC DH Fcat v13.09.2
 **/

#include <stdint.h>
#include <K2LSystem.h>
#include <ACSStreams.h>
#include <K2LACSClient.h>
#include <K2LACSMOST.h>
#include <MOSTProtocolDefinitions.h>

#include "DHAVN_MOSTManager_DiagnosisFBlock.h"


acs::generated::fblock::Diagnosis::CVersion::CVersion(acs::generated::fblock::Diagnosis::CDiagnosis *pInstance) : m_pInstance(pInstance)
{
}
acs::generated::fblock::Diagnosis::CVersion::~CVersion(void)
{
}
void acs::generated::fblock::Diagnosis::CVersion::SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener)
{
	m_pInstance->m_versionFunction.SetListener( pListener );
}
bool acs::generated::fblock::Diagnosis::CVersion::RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener)
{
	return m_pInstance->m_versionFunction.RemoveListener( pListener );
}
::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedProperty& acs::generated::fblock::Diagnosis::CVersion::FunctionInstance(void)
{
	return m_pInstance->m_versionFunction;
}
bool acs::generated::fblock::Diagnosis::CVersion::MajorValue( uint8_t value )
{
    return m_pInstance->m_versionMajorParameter.Value( value );
}

uint8_t acs::generated::fblock::Diagnosis::CVersion::MajorValue() const
{
	return m_pInstance->m_versionMajorParameter.Value();
}
::k2l::acs::protocols::most::CMOSTUnsignedByte& acs::generated::fblock::Diagnosis::CVersion::MajorDataType()
{
    return m_pInstance->m_versionMajorParameter;
}
bool acs::generated::fblock::Diagnosis::CVersion::MinorValue( uint8_t value )
{
    return m_pInstance->m_versionMinorParameter.Value( value );
}

uint8_t acs::generated::fblock::Diagnosis::CVersion::MinorValue() const
{
	return m_pInstance->m_versionMinorParameter.Value();
}
::k2l::acs::protocols::most::CMOSTUnsignedByte& acs::generated::fblock::Diagnosis::CVersion::MinorDataType()
{
    return m_pInstance->m_versionMinorParameter;
}
bool acs::generated::fblock::Diagnosis::CVersion::BuildValue( uint8_t value )
{
    return m_pInstance->m_versionBuildParameter.Value( value );
}

uint8_t acs::generated::fblock::Diagnosis::CVersion::BuildValue() const
{
	return m_pInstance->m_versionBuildParameter.Value();
}
::k2l::acs::protocols::most::CMOSTUnsignedByte& acs::generated::fblock::Diagnosis::CVersion::BuildDataType()
{
    return m_pInstance->m_versionBuildParameter;
}
bool acs::generated::fblock::Diagnosis::CVersion::UpdateShadows()
{
    return m_pInstance->m_versionFunction.UpdateShadows();
}
bool acs::generated::fblock::Diagnosis::CVersion::Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t * payload )
{
    return m_pInstance->m_versionFunction.Error( targetDevice, payloadLength, payload );
}
bool acs::generated::fblock::Diagnosis::CVersion::Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo )
{
    return m_pInstance->m_versionFunction.Error( targetDevice, errorCode, errorInfoLength, pErrorInfo );
}



acs::generated::fblock::Diagnosis::CFBlockInfo::CFBlockInfo(acs::generated::fblock::Diagnosis::CDiagnosis *pInstance) : m_pInstance(pInstance)
{
}
acs::generated::fblock::Diagnosis::CFBlockInfo::~CFBlockInfo(void)
{
}
void acs::generated::fblock::Diagnosis::CFBlockInfo::SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener)
{
	m_pInstance->m_fBlockInfoFunction.SetListener( pListener );
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener)
{
	return m_pInstance->m_fBlockInfoFunction.RemoveListener( pListener );
}
::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedProperty& acs::generated::fblock::Diagnosis::CFBlockInfo::FunctionInstance(void)
{
	return m_pInstance->m_fBlockInfoFunction;
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::IDValue( uint16_t value )
{
    return m_pInstance->m_fBlockInfoIDParameter.Value( value );
}

uint16_t acs::generated::fblock::Diagnosis::CFBlockInfo::IDValue() const
{
	return m_pInstance->m_fBlockInfoIDParameter.Value();
}
::k2l::acs::protocols::most::CMOSTUnsignedWord& acs::generated::fblock::Diagnosis::CFBlockInfo::IDDataType()
{
    return m_pInstance->m_fBlockInfoIDParameter;
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::FunctionMaturityValue( acs::generated::fblock::Diagnosis::CFBlockInfo::TFunctionMaturity value )
{
    return m_pInstance->m_fBlockInfoFunctionMaturityParameter.Value( value );
}

acs::generated::fblock::Diagnosis::CFBlockInfo::TFunctionMaturity acs::generated::fblock::Diagnosis::CFBlockInfo::FunctionMaturityValue() const
{
	return (acs::generated::fblock::Diagnosis::CFBlockInfo::TFunctionMaturity)m_pInstance->m_fBlockInfoFunctionMaturityParameter.Value();
}
::k2l::acs::protocols::most::CMOSTEnum& acs::generated::fblock::Diagnosis::CFBlockInfo::FunctionMaturityDataType()
{
    return m_pInstance->m_fBlockInfoFunctionMaturityParameter;
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::FBlockNameValue( uint8_t * value, uint32_t length )
{
    return m_pInstance->m_fBlockInfoFBlockNameParameter.MOSTString( value, length );
}

uint8_t * acs::generated::fblock::Diagnosis::CFBlockInfo::FBlockNameValue() const
{
	return m_pInstance->m_fBlockInfoFBlockNameParameter.MOSTStringContent();
}
::k2l::acs::protocols::most::CMOSTString& acs::generated::fblock::Diagnosis::CFBlockInfo::FBlockNameDataType()
{
    return m_pInstance->m_fBlockInfoFBlockNameParameter;
}
uint32_t acs::generated::fblock::Diagnosis::CFBlockInfo::FBlockNameLength() const
{
	return m_pInstance->m_fBlockInfoFBlockNameParameter.MOSTStringLength();
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::FBlockNameAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding )            
{
    return m_pInstance->m_fBlockInfoFBlockNameParameter.AddEncoding( mostStringIdentifier, pStringEncoding );
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::FBlockNameString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes )
{
    return m_pInstance->m_fBlockInfoFBlockNameParameter.String( pStringEncoding, pStringContent, stringLengthBytes );
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::FBlockNameString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength )
{
    return m_pInstance->m_fBlockInfoFBlockNameParameter.String( ppStringEncoding, ppString, pStringLength );
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::SupplierVersionValue( uint8_t * value, uint32_t length )
{
    return m_pInstance->m_fBlockInfoSupplierVersionParameter.MOSTString( value, length );
}

uint8_t * acs::generated::fblock::Diagnosis::CFBlockInfo::SupplierVersionValue() const
{
	return m_pInstance->m_fBlockInfoSupplierVersionParameter.MOSTStringContent();
}
::k2l::acs::protocols::most::CMOSTString& acs::generated::fblock::Diagnosis::CFBlockInfo::SupplierVersionDataType()
{
    return m_pInstance->m_fBlockInfoSupplierVersionParameter;
}
uint32_t acs::generated::fblock::Diagnosis::CFBlockInfo::SupplierVersionLength() const
{
	return m_pInstance->m_fBlockInfoSupplierVersionParameter.MOSTStringLength();
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::SupplierVersionAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding )            
{
    return m_pInstance->m_fBlockInfoSupplierVersionParameter.AddEncoding( mostStringIdentifier, pStringEncoding );
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::SupplierVersionString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes )
{
    return m_pInstance->m_fBlockInfoSupplierVersionParameter.String( pStringEncoding, pStringContent, stringLengthBytes );
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::SupplierVersionString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength )
{
    return m_pInstance->m_fBlockInfoSupplierVersionParameter.String( ppStringEncoding, ppString, pStringLength );
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::FBlockVersionValue( uint8_t * value, uint32_t length )
{
    return m_pInstance->m_fBlockInfoFBlockVersionParameter.MOSTString( value, length );
}

uint8_t * acs::generated::fblock::Diagnosis::CFBlockInfo::FBlockVersionValue() const
{
	return m_pInstance->m_fBlockInfoFBlockVersionParameter.MOSTStringContent();
}
::k2l::acs::protocols::most::CMOSTString& acs::generated::fblock::Diagnosis::CFBlockInfo::FBlockVersionDataType()
{
    return m_pInstance->m_fBlockInfoFBlockVersionParameter;
}
uint32_t acs::generated::fblock::Diagnosis::CFBlockInfo::FBlockVersionLength() const
{
	return m_pInstance->m_fBlockInfoFBlockVersionParameter.MOSTStringLength();
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::FBlockVersionAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding )            
{
    return m_pInstance->m_fBlockInfoFBlockVersionParameter.AddEncoding( mostStringIdentifier, pStringEncoding );
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::FBlockVersionString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes )
{
    return m_pInstance->m_fBlockInfoFBlockVersionParameter.String( pStringEncoding, pStringContent, stringLengthBytes );
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::FBlockVersionString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength )
{
    return m_pInstance->m_fBlockInfoFBlockVersionParameter.String( ppStringEncoding, ppString, pStringLength );
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::MOSTVersionValue( uint8_t * value, uint32_t length )
{
    return m_pInstance->m_fBlockInfoMOSTVersionParameter.MOSTString( value, length );
}

uint8_t * acs::generated::fblock::Diagnosis::CFBlockInfo::MOSTVersionValue() const
{
	return m_pInstance->m_fBlockInfoMOSTVersionParameter.MOSTStringContent();
}
::k2l::acs::protocols::most::CMOSTString& acs::generated::fblock::Diagnosis::CFBlockInfo::MOSTVersionDataType()
{
    return m_pInstance->m_fBlockInfoMOSTVersionParameter;
}
uint32_t acs::generated::fblock::Diagnosis::CFBlockInfo::MOSTVersionLength() const
{
	return m_pInstance->m_fBlockInfoMOSTVersionParameter.MOSTStringLength();
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::MOSTVersionAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding )            
{
    return m_pInstance->m_fBlockInfoMOSTVersionParameter.AddEncoding( mostStringIdentifier, pStringEncoding );
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::MOSTVersionString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes )
{
    return m_pInstance->m_fBlockInfoMOSTVersionParameter.String( pStringEncoding, pStringContent, stringLengthBytes );
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::MOSTVersionString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength )
{
    return m_pInstance->m_fBlockInfoMOSTVersionParameter.String( ppStringEncoding, ppString, pStringLength );
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::SystemIntegratorValue( uint8_t * value, uint32_t length )
{
    return m_pInstance->m_fBlockInfoSystemIntegratorParameter.MOSTString( value, length );
}

uint8_t * acs::generated::fblock::Diagnosis::CFBlockInfo::SystemIntegratorValue() const
{
	return m_pInstance->m_fBlockInfoSystemIntegratorParameter.MOSTStringContent();
}
::k2l::acs::protocols::most::CMOSTString& acs::generated::fblock::Diagnosis::CFBlockInfo::SystemIntegratorDataType()
{
    return m_pInstance->m_fBlockInfoSystemIntegratorParameter;
}
uint32_t acs::generated::fblock::Diagnosis::CFBlockInfo::SystemIntegratorLength() const
{
	return m_pInstance->m_fBlockInfoSystemIntegratorParameter.MOSTStringLength();
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::SystemIntegratorAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding )            
{
    return m_pInstance->m_fBlockInfoSystemIntegratorParameter.AddEncoding( mostStringIdentifier, pStringEncoding );
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::SystemIntegratorString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes )
{
    return m_pInstance->m_fBlockInfoSystemIntegratorParameter.String( pStringEncoding, pStringContent, stringLengthBytes );
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::SystemIntegratorString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength )
{
    return m_pInstance->m_fBlockInfoSystemIntegratorParameter.String( ppStringEncoding, ppString, pStringLength );
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::FBlockTypeValue( uint8_t * value, uint32_t length )
{
    return m_pInstance->m_fBlockInfoFBlockTypeParameter.MOSTString( value, length );
}

uint8_t * acs::generated::fblock::Diagnosis::CFBlockInfo::FBlockTypeValue() const
{
	return m_pInstance->m_fBlockInfoFBlockTypeParameter.MOSTStringContent();
}
::k2l::acs::protocols::most::CMOSTString& acs::generated::fblock::Diagnosis::CFBlockInfo::FBlockTypeDataType()
{
    return m_pInstance->m_fBlockInfoFBlockTypeParameter;
}
uint32_t acs::generated::fblock::Diagnosis::CFBlockInfo::FBlockTypeLength() const
{
	return m_pInstance->m_fBlockInfoFBlockTypeParameter.MOSTStringLength();
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::FBlockTypeAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding )            
{
    return m_pInstance->m_fBlockInfoFBlockTypeParameter.AddEncoding( mostStringIdentifier, pStringEncoding );
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::FBlockTypeString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes )
{
    return m_pInstance->m_fBlockInfoFBlockTypeParameter.String( pStringEncoding, pStringContent, stringLengthBytes );
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::FBlockTypeString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength )
{
    return m_pInstance->m_fBlockInfoFBlockTypeParameter.String( ppStringEncoding, ppString, pStringLength );
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::DescriptionValue( uint8_t * value, uint32_t length )
{
    return m_pInstance->m_fBlockInfoDescriptionParameter.Stream( value, length );
}

const uint8_t * acs::generated::fblock::Diagnosis::CFBlockInfo::DescriptionValue() const
{
	return m_pInstance->m_fBlockInfoDescriptionParameter.Stream();
}
::k2l::acs::protocols::most::CMOSTCaseStream& acs::generated::fblock::Diagnosis::CFBlockInfo::DescriptionDataType()
{
    return m_pInstance->m_fBlockInfoDescriptionParameter;
}
uint32_t acs::generated::fblock::Diagnosis::CFBlockInfo::DescriptionStreamLength() const
{
	return m_pInstance->m_fBlockInfoDescriptionParameter.StreamLength();
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::DescriptionLoadNext()
{
    return m_pInstance->m_fBlockInfoDescriptionParameter.LoadNext();
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::DescriptionSaveNext()
{
    return m_pInstance->m_fBlockInfoDescriptionParameter.SaveNext();
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::UpdateShadows()
{
    return m_pInstance->m_fBlockInfoFunction.UpdateShadows();
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t * payload )
{
    return m_pInstance->m_fBlockInfoFunction.Error( targetDevice, payloadLength, payload );
}
bool acs::generated::fblock::Diagnosis::CFBlockInfo::Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo )
{
    return m_pInstance->m_fBlockInfoFunction.Error( targetDevice, errorCode, errorInfoLength, pErrorInfo );
}



acs::generated::fblock::Diagnosis::CSWVersion::CSWVersion(acs::generated::fblock::Diagnosis::CDiagnosis *pInstance) : m_pInstance(pInstance)
{
}
acs::generated::fblock::Diagnosis::CSWVersion::~CSWVersion(void)
{
}
void acs::generated::fblock::Diagnosis::CSWVersion::SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener)
{
	m_pInstance->m_sWVersionFunction.SetListener( pListener );
}
bool acs::generated::fblock::Diagnosis::CSWVersion::RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener)
{
	return m_pInstance->m_sWVersionFunction.RemoveListener( pListener );
}
::k2l::acs::protocols::most::CMOSTFunctionClassUnclassifiedProperty& acs::generated::fblock::Diagnosis::CSWVersion::FunctionInstance(void)
{
	return m_pInstance->m_sWVersionFunction;
}
bool acs::generated::fblock::Diagnosis::CSWVersion::MainSWValue( uint8_t * value, uint32_t length )
{
    return m_pInstance->m_sWVersionMainSWParameter.MOSTString( value, length );
}

uint8_t * acs::generated::fblock::Diagnosis::CSWVersion::MainSWValue() const
{
	return m_pInstance->m_sWVersionMainSWParameter.MOSTStringContent();
}
::k2l::acs::protocols::most::CMOSTString& acs::generated::fblock::Diagnosis::CSWVersion::MainSWDataType()
{
    return m_pInstance->m_sWVersionMainSWParameter;
}
uint32_t acs::generated::fblock::Diagnosis::CSWVersion::MainSWLength() const
{
	return m_pInstance->m_sWVersionMainSWParameter.MOSTStringLength();
}
bool acs::generated::fblock::Diagnosis::CSWVersion::MainSWAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding )            
{
    return m_pInstance->m_sWVersionMainSWParameter.AddEncoding( mostStringIdentifier, pStringEncoding );
}
bool acs::generated::fblock::Diagnosis::CSWVersion::MainSWString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes )
{
    return m_pInstance->m_sWVersionMainSWParameter.String( pStringEncoding, pStringContent, stringLengthBytes );
}
bool acs::generated::fblock::Diagnosis::CSWVersion::MainSWString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength )
{
    return m_pInstance->m_sWVersionMainSWParameter.String( ppStringEncoding, ppString, pStringLength );
}
bool acs::generated::fblock::Diagnosis::CSWVersion::FCatValue( uint8_t * value, uint32_t length )
{
    return m_pInstance->m_sWVersionFCatParameter.MOSTString( value, length );
}

uint8_t * acs::generated::fblock::Diagnosis::CSWVersion::FCatValue() const
{
	return m_pInstance->m_sWVersionFCatParameter.MOSTStringContent();
}
::k2l::acs::protocols::most::CMOSTString& acs::generated::fblock::Diagnosis::CSWVersion::FCatDataType()
{
    return m_pInstance->m_sWVersionFCatParameter;
}
uint32_t acs::generated::fblock::Diagnosis::CSWVersion::FCatLength() const
{
	return m_pInstance->m_sWVersionFCatParameter.MOSTStringLength();
}
bool acs::generated::fblock::Diagnosis::CSWVersion::FCatAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding )            
{
    return m_pInstance->m_sWVersionFCatParameter.AddEncoding( mostStringIdentifier, pStringEncoding );
}
bool acs::generated::fblock::Diagnosis::CSWVersion::FCatString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes )
{
    return m_pInstance->m_sWVersionFCatParameter.String( pStringEncoding, pStringContent, stringLengthBytes );
}
bool acs::generated::fblock::Diagnosis::CSWVersion::FCatString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength )
{
    return m_pInstance->m_sWVersionFCatParameter.String( ppStringEncoding, ppString, pStringLength );
}
bool acs::generated::fblock::Diagnosis::CSWVersion::CANDBValue( uint8_t * value, uint32_t length )
{
    return m_pInstance->m_sWVersionCANDBParameter.MOSTString( value, length );
}

uint8_t * acs::generated::fblock::Diagnosis::CSWVersion::CANDBValue() const
{
	return m_pInstance->m_sWVersionCANDBParameter.MOSTStringContent();
}
::k2l::acs::protocols::most::CMOSTString& acs::generated::fblock::Diagnosis::CSWVersion::CANDBDataType()
{
    return m_pInstance->m_sWVersionCANDBParameter;
}
uint32_t acs::generated::fblock::Diagnosis::CSWVersion::CANDBLength() const
{
	return m_pInstance->m_sWVersionCANDBParameter.MOSTStringLength();
}
bool acs::generated::fblock::Diagnosis::CSWVersion::CANDBAddEncoding(uint8_t mostStringIdentifier, const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding )            
{
    return m_pInstance->m_sWVersionCANDBParameter.AddEncoding( mostStringIdentifier, pStringEncoding );
}
bool acs::generated::fblock::Diagnosis::CSWVersion::CANDBString(const k2l::acs::protocols::most::string::IStringEncoding* pStringEncoding, const uint8_t* pStringContent, uint32_t stringLengthBytes )
{
    return m_pInstance->m_sWVersionCANDBParameter.String( pStringEncoding, pStringContent, stringLengthBytes );
}
bool acs::generated::fblock::Diagnosis::CSWVersion::CANDBString(const k2l::acs::protocols::most::string::IStringEncoding** ppStringEncoding, uint8_t** ppString, uint32_t* pStringLength )
{
    return m_pInstance->m_sWVersionCANDBParameter.String( ppStringEncoding, ppString, pStringLength );
}
bool acs::generated::fblock::Diagnosis::CSWVersion::UpdateShadows()
{
    return m_pInstance->m_sWVersionFunction.UpdateShadows();
}
bool acs::generated::fblock::Diagnosis::CSWVersion::Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t * payload )
{
    return m_pInstance->m_sWVersionFunction.Error( targetDevice, payloadLength, payload );
}
bool acs::generated::fblock::Diagnosis::CSWVersion::Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo )
{
    return m_pInstance->m_sWVersionFunction.Error( targetDevice, errorCode, errorInfoLength, pErrorInfo );
}



acs::generated::fblock::Diagnosis::CVariantCode::CVariantCode(acs::generated::fblock::Diagnosis::CDiagnosis *pInstance) : m_pInstance(pInstance)
{
}
acs::generated::fblock::Diagnosis::CVariantCode::~CVariantCode(void)
{
}
void acs::generated::fblock::Diagnosis::CVariantCode::SetListener(::k2l::acs::protocols::most::IACSMOSTEventListener * pListener)
{
	m_pInstance->m_variantCodeFunction.SetListener( pListener );
}
bool acs::generated::fblock::Diagnosis::CVariantCode::RemoveListener(::k2l::acs::protocols::most::IACSMOSTEventListener *pListener)
{
	return m_pInstance->m_variantCodeFunction.RemoveListener( pListener );
}
::k2l::acs::protocols::most::CMOSTFunctionClassSequenceProperty& acs::generated::fblock::Diagnosis::CVariantCode::FunctionInstance(void)
{
	return m_pInstance->m_variantCodeFunction;
}
bool acs::generated::fblock::Diagnosis::CVariantCode::VehicleVariantValue( acs::generated::fblock::Diagnosis::CVariantCode::TVehicleVariant value )
{
    return m_pInstance->m_variantCodeVehicleVariantParameter.Value( value );
}

acs::generated::fblock::Diagnosis::CVariantCode::TVehicleVariant acs::generated::fblock::Diagnosis::CVariantCode::VehicleVariantValue() const
{
	return (acs::generated::fblock::Diagnosis::CVariantCode::TVehicleVariant)m_pInstance->m_variantCodeVehicleVariantParameter.Value();
}
::k2l::acs::protocols::most::CMOSTEnum& acs::generated::fblock::Diagnosis::CVariantCode::VehicleVariantDataType()
{
    return m_pInstance->m_variantCodeVehicleVariantParameter;
}
bool acs::generated::fblock::Diagnosis::CVariantCode::CountryVariantValue( acs::generated::fblock::Diagnosis::CVariantCode::TCountryVariant value )
{
    return m_pInstance->m_variantCodeCountryVariantParameter.Value( value );
}

acs::generated::fblock::Diagnosis::CVariantCode::TCountryVariant acs::generated::fblock::Diagnosis::CVariantCode::CountryVariantValue() const
{
	return (acs::generated::fblock::Diagnosis::CVariantCode::TCountryVariant)m_pInstance->m_variantCodeCountryVariantParameter.Value();
}
::k2l::acs::protocols::most::CMOSTEnum& acs::generated::fblock::Diagnosis::CVariantCode::CountryVariantDataType()
{
    return m_pInstance->m_variantCodeCountryVariantParameter;
}
bool acs::generated::fblock::Diagnosis::CVariantCode::SystemVariantValue( uint32_t value )
{
    return m_pInstance->m_variantCodeSystemVariantParameter.Value( value );
}

uint32_t acs::generated::fblock::Diagnosis::CVariantCode::SystemVariantValue() const
{
	return m_pInstance->m_variantCodeSystemVariantParameter.Value();
}
::k2l::acs::protocols::most::CMOSTUnsignedLong& acs::generated::fblock::Diagnosis::CVariantCode::SystemVariantDataType()
{
    return m_pInstance->m_variantCodeSystemVariantParameter;
}
bool acs::generated::fblock::Diagnosis::CVariantCode::DVDRegionValue( acs::generated::fblock::Diagnosis::CVariantCode::TDVDRegion value )
{
    return m_pInstance->m_variantCodeDVDRegionParameter.Value( value );
}

acs::generated::fblock::Diagnosis::CVariantCode::TDVDRegion acs::generated::fblock::Diagnosis::CVariantCode::DVDRegionValue() const
{
	return (acs::generated::fblock::Diagnosis::CVariantCode::TDVDRegion)m_pInstance->m_variantCodeDVDRegionParameter.Value();
}
::k2l::acs::protocols::most::CMOSTEnum& acs::generated::fblock::Diagnosis::CVariantCode::DVDRegionDataType()
{
    return m_pInstance->m_variantCodeDVDRegionParameter;
}
bool acs::generated::fblock::Diagnosis::CVariantCode::DVDMenuLanguageValue( uint16_t value )
{
    return m_pInstance->m_variantCodeDVDMenuLanguageParameter.Value( value );
}

uint16_t acs::generated::fblock::Diagnosis::CVariantCode::DVDMenuLanguageValue() const
{
	return m_pInstance->m_variantCodeDVDMenuLanguageParameter.Value();
}
::k2l::acs::protocols::most::CMOSTUnsignedWord& acs::generated::fblock::Diagnosis::CVariantCode::DVDMenuLanguageDataType()
{
    return m_pInstance->m_variantCodeDVDMenuLanguageParameter;
}
bool acs::generated::fblock::Diagnosis::CVariantCode::UpdateShadows()
{
    return m_pInstance->m_variantCodeFunction.UpdateShadows();
}
bool acs::generated::fblock::Diagnosis::CVariantCode::Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint32_t payloadLength, const uint8_t * payload )
{
    return m_pInstance->m_variantCodeFunction.Error( targetDevice, payloadLength, payload );
}
bool acs::generated::fblock::Diagnosis::CVariantCode::Error( ::k2l::acs::protocols::most::DeviceID_t targetDevice, uint8_t errorCode, uint32_t errorInfoLength, const uint8_t *pErrorInfo )
{
    return m_pInstance->m_variantCodeFunction.Error( targetDevice, errorCode, errorInfoLength, pErrorInfo );
}


const uint8_t acs::generated::fblock::Diagnosis::CDiagnosis::m_fBlockInfoFunctionMaturityParameterSpecValues[] = { 0, 1, 2, 3, 17, 18 };
const uint8_t acs::generated::fblock::Diagnosis::CDiagnosis::m_variantCodeVehicleVariantParameterSpecValues[] = { 0, 1, 2, 3, 255 };
const uint8_t acs::generated::fblock::Diagnosis::CDiagnosis::m_variantCodeCountryVariantParameterSpecValues[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 255 };
const uint8_t acs::generated::fblock::Diagnosis::CDiagnosis::m_variantCodeDVDRegionParameterSpecValues[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8 };


acs::generated::fblock::Diagnosis::CDiagnosis::CDiagnosis(k2l::acs::protocols::most::InstanceID_t instanceID):
	::k2l::acs::protocols::most::CFunctionBlockBase(FBlockID, instanceID)
{
}

acs::generated::fblock::Diagnosis::CDiagnosis::CDiagnosis(k2l::acs::protocols::most::FBlockID_t fblockID, k2l::acs::protocols::most::InstanceID_t instanceID):
	::k2l::acs::protocols::most::CFunctionBlockBase(fblockID, instanceID)
{
}

acs::generated::fblock::Diagnosis::CDiagnosis::~CDiagnosis(void)
{
}

/*virtual*/
bool
acs::generated::fblock::Diagnosis::CDiagnosis::InitializeMOSTElement()
{
	k2l::acs::protocols::most::CMOSTDataType *elements[8];
m_versionFunction.FunctionID( 0x10 );
m_versionFunction.Notification( false );
m_versionFunction.AutomaticNotification( true );
m_versionFunction.SupportedOperations( 0x9002 );
elements[0] = &m_versionMajorParameter;
elements[1] = &m_versionMinorParameter;
elements[2] = &m_versionBuildParameter;
m_versionFunction.SetDataItems(12, 3, elements);
AddFunction( &m_versionFunction );
m_fBlockInfoFunction.FunctionID( 0x11 );
m_fBlockInfoFunction.Notification( false );
m_fBlockInfoFunction.AutomaticNotification( true );
m_fBlockInfoFunction.SupportedOperations( 0x9002 );
m_fBlockInfoFunctionMaturityParameterSpec.Values( 6, m_fBlockInfoFunctionMaturityParameterSpecValues );
m_fBlockInfoFBlockNameParameterSpec.MaxCharacters( 0 );
m_fBlockInfoSupplierVersionParameterSpec.MaxCharacters( 0 );
m_fBlockInfoFBlockVersionParameterSpec.MaxCharacters( 0 );
m_fBlockInfoMOSTVersionParameterSpec.MaxCharacters( 0 );
m_fBlockInfoSystemIntegratorParameterSpec.MaxCharacters( 0 );
m_fBlockInfoFBlockTypeParameterSpec.MaxCharacters( 0 );
m_fBlockInfoFunctionMaturityParameter.SetValidator( &m_fBlockInfoFunctionMaturityParameterSpec );
m_fBlockInfoFunctionMaturityParameter.Value( m_fBlockInfoFunctionMaturityParameterSpecValues[0] );
m_fBlockInfoFBlockNameParameter.SetValidator( &m_fBlockInfoFBlockNameParameterSpec );
m_fBlockInfoSupplierVersionParameter.SetValidator( &m_fBlockInfoSupplierVersionParameterSpec );
m_fBlockInfoFBlockVersionParameter.SetValidator( &m_fBlockInfoFBlockVersionParameterSpec );
m_fBlockInfoMOSTVersionParameter.SetValidator( &m_fBlockInfoMOSTVersionParameterSpec );
m_fBlockInfoSystemIntegratorParameter.SetValidator( &m_fBlockInfoSystemIntegratorParameterSpec );
m_fBlockInfoFBlockTypeParameter.SetValidator( &m_fBlockInfoFBlockTypeParameterSpec );
elements[0] = &m_fBlockInfoFunctionMaturityParameter;
m_fBlockInfoDescription0RecordFixParameter.SetMembers( 1, elements );
m_fBlockInfoDescription0Parameter.SetRecordFix( m_fBlockInfoDescription0RecordFixParameter );
m_fBlockInfoDescription0RecordIteratorParameter.SetMembers( 0, elements );
m_fBlockInfoDescription0Parameter.SetRecordIterator( m_fBlockInfoDescription0RecordIteratorParameter );
elements[0] = &m_fBlockInfoFBlockNameParameter;
elements[1] = &m_fBlockInfoSupplierVersionParameter;
elements[2] = &m_fBlockInfoFBlockVersionParameter;
elements[3] = &m_fBlockInfoMOSTVersionParameter;
elements[4] = &m_fBlockInfoSystemIntegratorParameter;
elements[5] = &m_fBlockInfoFBlockTypeParameter;
m_fBlockInfoDescription61440RecordFixParameter.SetMembers( 6, elements );
m_fBlockInfoDescription61440Parameter.SetRecordFix( m_fBlockInfoDescription61440RecordFixParameter );
m_fBlockInfoDescription61440RecordIteratorParameter.SetMembers( 0, elements );
m_fBlockInfoDescription61440Parameter.SetRecordIterator( m_fBlockInfoDescription61440RecordIteratorParameter );
elements[0] = &m_fBlockInfoFBlockNameParameter;
m_fBlockInfoDescription61441RecordFixParameter.SetMembers( 1, elements );
m_fBlockInfoDescription61441Parameter.SetRecordFix( m_fBlockInfoDescription61441RecordFixParameter );
m_fBlockInfoDescription61441RecordIteratorParameter.SetMembers( 0, elements );
m_fBlockInfoDescription61441Parameter.SetRecordIterator( m_fBlockInfoDescription61441RecordIteratorParameter );
elements[0] = &m_fBlockInfoSupplierVersionParameter;
m_fBlockInfoDescription61442RecordFixParameter.SetMembers( 1, elements );
m_fBlockInfoDescription61442Parameter.SetRecordFix( m_fBlockInfoDescription61442RecordFixParameter );
m_fBlockInfoDescription61442RecordIteratorParameter.SetMembers( 0, elements );
m_fBlockInfoDescription61442Parameter.SetRecordIterator( m_fBlockInfoDescription61442RecordIteratorParameter );
elements[0] = &m_fBlockInfoFBlockVersionParameter;
m_fBlockInfoDescription61443RecordFixParameter.SetMembers( 1, elements );
m_fBlockInfoDescription61443Parameter.SetRecordFix( m_fBlockInfoDescription61443RecordFixParameter );
m_fBlockInfoDescription61443RecordIteratorParameter.SetMembers( 0, elements );
m_fBlockInfoDescription61443Parameter.SetRecordIterator( m_fBlockInfoDescription61443RecordIteratorParameter );
elements[0] = &m_fBlockInfoMOSTVersionParameter;
m_fBlockInfoDescription61444RecordFixParameter.SetMembers( 1, elements );
m_fBlockInfoDescription61444Parameter.SetRecordFix( m_fBlockInfoDescription61444RecordFixParameter );
m_fBlockInfoDescription61444RecordIteratorParameter.SetMembers( 0, elements );
m_fBlockInfoDescription61444Parameter.SetRecordIterator( m_fBlockInfoDescription61444RecordIteratorParameter );
elements[0] = &m_fBlockInfoSystemIntegratorParameter;
m_fBlockInfoDescription61445RecordFixParameter.SetMembers( 1, elements );
m_fBlockInfoDescription61445Parameter.SetRecordFix( m_fBlockInfoDescription61445RecordFixParameter );
m_fBlockInfoDescription61445RecordIteratorParameter.SetMembers( 0, elements );
m_fBlockInfoDescription61445Parameter.SetRecordIterator( m_fBlockInfoDescription61445RecordIteratorParameter );
elements[0] = &m_fBlockInfoFBlockTypeParameter;
m_fBlockInfoDescription61446RecordFixParameter.SetMembers( 1, elements );
m_fBlockInfoDescription61446Parameter.SetRecordFix( m_fBlockInfoDescription61446RecordFixParameter );
m_fBlockInfoDescription61446RecordIteratorParameter.SetMembers( 0, elements );
m_fBlockInfoDescription61446Parameter.SetRecordIterator( m_fBlockInfoDescription61446RecordIteratorParameter );
{
    uint32_t minValues[] = {0, 61440, 61441, 61442, 61443, 61444, 61445, 61446};
    uint32_t maxValues[] = {4095, 61440, 61441, 61442, 61443, 61444, 61445, 61446};
    k2l::acs::protocols::most::CMOSTList* streamCases[] = { &m_fBlockInfoDescription0Parameter,  &m_fBlockInfoDescription61440Parameter,  &m_fBlockInfoDescription61441Parameter,  &m_fBlockInfoDescription61442Parameter,  &m_fBlockInfoDescription61443Parameter,  &m_fBlockInfoDescription61444Parameter,  &m_fBlockInfoDescription61445Parameter,  &m_fBlockInfoDescription61446Parameter};
    m_fBlockInfoDescriptionParameter.SetStreamCases( 8, minValues, maxValues, streamCases );
}
m_fBlockInfoDescriptionParameter.SetSelector( m_fBlockInfoIDParameter );
elements[0] = &m_fBlockInfoIDParameter;
elements[1] = &m_fBlockInfoDescriptionParameter;
m_fBlockInfoFunction.SetDataItems(12, 2, elements);
elements[0] = &m_fBlockInfoIDParameter;
m_fBlockInfoFunction.SetDataItems(1, 1, elements);
AddFunction( &m_fBlockInfoFunction );
m_sWVersionFunction.FunctionID( 0xC02 );
m_sWVersionFunction.Notification( false );
m_sWVersionFunction.AutomaticNotification( true );
m_sWVersionFunction.SupportedOperations( 0x9002 );
m_sWVersionMainSWParameterSpec.MaxCharacters( 50 );
m_sWVersionMainSWParameter.SetValidator( &m_sWVersionMainSWParameterSpec );
m_sWVersionFCatParameterSpec.MaxCharacters( 15 );
m_sWVersionFCatParameter.SetValidator( &m_sWVersionFCatParameterSpec );
m_sWVersionCANDBParameterSpec.MaxCharacters( 15 );
m_sWVersionCANDBParameter.SetValidator( &m_sWVersionCANDBParameterSpec );
elements[0] = &m_sWVersionMainSWParameter;
elements[1] = &m_sWVersionFCatParameter;
elements[2] = &m_sWVersionCANDBParameter;
m_sWVersionFunction.SetDataItems(12, 3, elements);
AddFunction( &m_sWVersionFunction );
m_variantCodeFunction.FunctionID( 0xC03 );
m_variantCodeFunction.Notification( false );
m_variantCodeFunction.AutomaticNotification( true );
m_variantCodeFunction.SupportedOperations( 0x9002 );
m_variantCodeVehicleVariantParameterSpec.Values( 5, m_variantCodeVehicleVariantParameterSpecValues );
m_variantCodeVehicleVariantParameter.SetValidator( &m_variantCodeVehicleVariantParameterSpec );
m_variantCodeVehicleVariantParameter.Value( m_variantCodeVehicleVariantParameterSpecValues[0] );
m_variantCodeCountryVariantParameterSpec.Values( 10, m_variantCodeCountryVariantParameterSpecValues );
m_variantCodeCountryVariantParameter.SetValidator( &m_variantCodeCountryVariantParameterSpec );
m_variantCodeCountryVariantParameter.Value( m_variantCodeCountryVariantParameterSpecValues[0] );
m_variantCodeDVDRegionParameterSpec.Values( 9, m_variantCodeDVDRegionParameterSpecValues );
m_variantCodeDVDRegionParameter.SetValidator( &m_variantCodeDVDRegionParameterSpec );
m_variantCodeDVDRegionParameter.Value( m_variantCodeDVDRegionParameterSpecValues[0] );
elements[0] = &m_variantCodeVehicleVariantParameter;
elements[1] = &m_variantCodeCountryVariantParameter;
elements[2] = &m_variantCodeSystemVariantParameter;
elements[3] = &m_variantCodeDVDRegionParameter;
elements[4] = &m_variantCodeDVDMenuLanguageParameter;
m_variantCodeFunction.SetDataItems(12, 5, elements);
AddFunction( &m_variantCodeFunction );
AddFunction( &m_notificationCheckFunction );
AddFunction( &m_notificationFunction );
AddFunction( &m_fktIDsFunction );
NotificationService( &m_notificationFunction );
m_notificationFunction.Update();
m_fktIDsFunction.Update();
return true;
}


/*=============================================================================
 * END OF FILE
 *=============================================================================*/
