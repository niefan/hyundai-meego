/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp DHAVN_GracenoteCDLookup.xml -i CGracenoteCDLookupAdaptor -a CGracenoteCDLookupAdaptor
 *
 * qdbusxml2cpp is Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include <DHAVN_GracenoteCDLookupAdaptor.h>
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QDebug>
#include <QVector>

/*
 * Implementation of adaptor class CGracenoteCDLookupDBusAdaptor
 */

CGracenoteCDLookupDBusAdaptor::CGracenoteCDLookupDBusAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

CGracenoteCDLookupDBusAdaptor::~CGracenoteCDLookupDBusAdaptor()
{
    // destructor
}

void CGracenoteCDLookupDBusAdaptor::FetchGracenoteMediaDataForCD(const QString &cdtoc)
{
    qDebug() << "CGracenoteCDLookupDBusAdaptor";
    // handle method call org.lge.GracenoteCDLookupDBus.FetchGracenoteMediaDataForCD
    QMetaObject::invokeMethod(parent(), "FetchMediaDataFromCDTOCLookup", Q_ARG(QString, cdtoc));
}

void CGracenoteCDLookupDBusAdaptor::DeleteGracenoteMediaDataForCD(const QString &cdTOC)
{
    qDebug() << "DeleteGracenoteMediaDataForCD DBusAdaptor";
    // handle method call org.lge.GracenoteCDLookupDBus.FetchGracenoteMediaDataForCD
    QMetaObject::invokeMethod(parent(), "DeleteMediaDataForCD", Q_ARG(QString, cdTOC));
}

void CGracenoteCDLookupDBusAdaptor::RetrieveCoverArt(const QStringList &metaDataList)
{

    qDebug() << "RetrieveCoverArt DBusAdaptor";
    // handle method call org.lge.GracenoteCDLookupDBus.RetrieveCoverArt
    QMetaObject::invokeMethod(parent(), "RetrieveCoverArt", Q_ARG(QStringList, metaDataList));

}

void CGracenoteCDLookupDBusAdaptor::EnableMLTForVolume(const int &volume, const QString& SerialNum, const QString& mountPath)
{
    qDebug() << "EnableMLTForVolume DBusAdaptor";
    // handle method call org.lge.GracenoteCDLookupDBus.EnableMLTForVolume
    QMetaObject::invokeMethod(parent(), "EnableMLTForVolume", Q_ARG(int, volume), Q_ARG(QString, SerialNum), Q_ARG(QString, mountPath));

}

void CGracenoteCDLookupDBusAdaptor::USBConnected(const QString& serialNum, const QString& mountPath, const int &volume)
{
    LOG_INFO << "USBConnected" << LOG_ENDL;
    // handle method call org.lge.GracenoteCDLookupDBus.USBConnected
    QMetaObject::invokeMethod(parent(), "USBConnected", Q_ARG(QString, serialNum), Q_ARG(QString, mountPath), Q_ARG(int, volume));
}

	//added by Puneet for fixing MLT not higlited for JB/USB1/USB2 issue 2013.06.12
void CGracenoteCDLookupDBusAdaptor::jukeBoxMLT()
{
    LOG_INFO << "jukeBoxMLT" << LOG_ENDL;
    // handle method call org.lge.GracenoteCDLookupDBus.USBConnected
    QMetaObject::invokeMethod(parent(), "jukeBoxMLT");
}

void CGracenoteCDLookupDBusAdaptor::IPODConnected(const QString& serialNum, const int &StartIndex, const int &EndIndex, const int &syncState, const int &volume)
{
    LOG_INFO << "IPODConnected";
    // handle method call org.lge.GracenoteCDLookupDBus.IPODConnected
    QMetaObject::invokeMethod(parent(), "IPODConnected", Q_ARG(QString, serialNum), Q_ARG(int, StartIndex), Q_ARG(int, EndIndex), Q_ARG(int, syncState), Q_ARG(int, volume));
}

void CGracenoteCDLookupDBusAdaptor::HighLightedVolume(const int &volume, const QString& serialNum, const QString& mountPath)
{
    qDebug() << "HighLightedVolume";
    // handle method call org.lge.GracenoteCDLookupDBus.HighLightedVolume
    QMetaObject::invokeMethod(parent(), "HighLightedVolume", Q_ARG(int, volume), Q_ARG(QString, serialNum), Q_ARG(QString, mountPath));
}

void CGracenoteCDLookupDBusAdaptor::USBDisConnected(const QString& serialNum, const int &volume)
{
    qDebug() << "USBDisConnected";
    // handle method call org.lge.GracenoteCDLookupDBus.USBDisConnected
    QMetaObject::invokeMethod(parent(), "USBDisConnected", Q_ARG(QString, serialNum), Q_ARG(int, volume));
}

void CGracenoteCDLookupDBusAdaptor::IPODDisConnected(const QString& serialNum, const int &volume)
{
    qDebug() << "IPODDisConnected";
    // handle method call org.lge.GracenoteCDLookupDBus.IPODDisConnected
    QMetaObject::invokeMethod(parent(), "IPODDisConnected", Q_ARG(QString, serialNum),Q_ARG(int, volume));
}

void CGracenoteCDLookupDBusAdaptor::CloseCollectionIDs()
{
    qDebug() << "CloseCollectionIDs DBusAdaptor";
    // handle method call org.lge.GracenoteCDLookupDBus.CloseCollectionIDs
    QMetaObject::invokeMethod(parent(), "CloseCollectionIDs");
}

//void CGracenoteCDLookupDBusAdaptor::AVOffSignal()
//{
//    qDebug() << "AVOffSignal DBusAdaptor";
    // handle method call org.lge.GracenoteCDLookupDBus.AVOffSignal
//    QMetaObject::invokeMethod(parent(), "AVOffSignal");
//}
void CGracenoteCDLookupDBusAdaptor::RetrieveMultipleCoverArts(const QStringList& albumList, const QStringList& artistList)
{
    qDebug() << "RetrieveMultipleCoverArts DBusAdaptor";
    // handle method call org.lge.GracenoteCDLookupDBus.RetrieveMultipleCoverArts
    QMetaObject::invokeMethod(parent(), "RetrieveMultipleCoverArts", Q_ARG(QStringList, albumList), Q_ARG(QStringList, artistList));
}

void CGracenoteCDLookupDBusAdaptor::ResyncAfterCopyOperation(const int &targetVolume)
{
    qDebug() << "ResyncAfterCopyOperation DBusAdaptor";
    // handle method call org.lge.GracenoteCDLookupDBus.ResyncAfterCopyOperation
    QMetaObject::invokeMethod(parent(), "ResyncAfterCopyOperation", Q_ARG(int, targetVolume));
}
//{added by aettie.ji 20130904 for gracenote version
void CGracenoteCDLookupDBusAdaptor::GetSDKVer()
{
    qDebug() << "GetSDKVer DBusAdaptor";
    // handle method call org.lge.GracenoteCDLookupDBus.GetSDKVer
    QMetaObject::invokeMethod(parent(), "GetSDKVer");
}
void CGracenoteCDLookupDBusAdaptor::GetDBVer()
{
    qDebug() << "GetDBVer DBusAdaptor";
    // handle method call org.lge.GracenoteCDLookupDBus.GetDBVer
    QMetaObject::invokeMethod(parent(), "GetDBVer");
}
//20131023 System info
void CGracenoteCDLookupDBusAdaptor::GetDBRegionVer()
{
    qDebug() << "GetDBRegionVer DBusAdaptor";
     //handle method call org.lge.GracenoteCDLookupDBus.GetDBRegionVer
    QMetaObject::invokeMethod(parent(), "GetDBRegionVer");
}
//}added by aettie.ji 20130904 for gracenote version
 //deleted by aettie 20131010 unused code
//{added by aettie.ji 20130904 for gracenote logo
//void CGracenoteCDLookupDBusAdaptor::RequestEmitSignalForGracenoteLogo()
//{
   // qDebug() << "RequestEmitSignalForGracenoteLogo DBusAdaptor";
    // handle method call org.lge.GracenoteCDLookupDBus.RequestEmitSignalForGracenoteLogo
    //QMetaObject::invokeMethod(parent(), "RequestEmitSignalForGracenoteLogo");
//}
//}added by aettie.ji 20130904 for gracenote logo
//End of file
