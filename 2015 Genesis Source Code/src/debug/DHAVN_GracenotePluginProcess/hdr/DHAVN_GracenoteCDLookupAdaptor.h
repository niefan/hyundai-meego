/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp DHAVN_GracenoteCDLookup.xml -i CGracenoteCDLookupAdaptor -a CGracenoteCDLookupAdaptor
 *
 * qdbusxml2cpp is Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef CGRACENOTECDLOOKUPADAPTOR_H_1320815621
#define CGRACENOTECDLOOKUPADAPTOR_H_1320815621

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include <DHAVN_LogUtil.h>

class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;

/*
 * Adaptor class for interface org.lge.GracenoteCDLookupDBus
 */
class CGracenoteCDLookupDBusAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    USE_LOG_UTIL
    Q_CLASSINFO("D-Bus Interface", "org.lge.GracenoteCDLookupDBus")
    Q_CLASSINFO("D-Bus Introspection", ""
        "")
public:
    CGracenoteCDLookupDBusAdaptor(QObject *parent);
    virtual ~CGracenoteCDLookupDBusAdaptor();

public: // PROPERTIES
public Q_SLOTS: // METHODS
    Q_INVOKABLE void FetchGracenoteMediaDataForCD(const QString &cdtoc);
    Q_INVOKABLE void DeleteGracenoteMediaDataForCD(const QString &cdTOC);
    Q_INVOKABLE void RetrieveCoverArt(const QStringList &metaDataList);
    Q_INVOKABLE void EnableMLTForVolume(const int &volume, const QString& SerialNum, const QString& mountPath);
    Q_INVOKABLE void USBConnected(const QString& serialNum, const QString& mountPath, const int &volume);
    Q_INVOKABLE void jukeBoxMLT(); 	//added by Puneet for fixing MLT not higlited for JB/USB1/USB2 issue 2013.06.12
    Q_INVOKABLE void IPODConnected(const QString& serialNum, const int &StartIndex, const int &EndIndex, const int &syncState, const int &volume);
    Q_INVOKABLE void HighLightedVolume(const int &volume, const QString& serialNum, const QString& mountPath);
    Q_INVOKABLE void USBDisConnected(const QString& serialNum, const int &volume);
    Q_INVOKABLE void IPODDisConnected(const QString& serialNum,const int &volume);
    Q_INVOKABLE void CloseCollectionIDs();
    //Q_INVOKABLE void AVOffSignal();

    Q_INVOKABLE void RetrieveMultipleCoverArts(const QStringList& albumList, const QStringList& artistList);
    Q_INVOKABLE void ResyncAfterCopyOperation(const int &DestinationVolume);
//{added by aettie.ji 20130904 for gracenote version
    Q_INVOKABLE void GetSDKVer();
    Q_INVOKABLE void GetDBVer();
    Q_INVOKABLE void GetDBRegionVer(); //20131023 System info
//}added by aettie.ji 20130904 for gracenote version
   // Q_INVOKABLE void RequestEmitSignalForGracenoteLogo();  //deleted by aettie 20131010 unused code


Q_SIGNALS: // SIGNALS
     void OnMusicIDCDDataReceived(bool status);
     void CoverArtRetrieved(bool status, QString imagePath);
     //{modified by esjang 2012.11.14 for XSampa DB update with Volume Info
     //void XSampaDataUpdated();
     //void XSampaDataUpdated(int volume); //deleted by aettie Xsampa DB is not used.
     //}modified by esjang 2012.11.14 for XSampa DB update with Volume Info
     void CoverArtsRetrieved(QStringList imagePathList);

     void GracenoteIndexingStatus(bool status, int deviceType);
     void GracenoteKilled(); //add by aettie for Gracenote killed handling
	 //{added by aettie.ji 20130904 for gracenote version
     void GNSDKVer(QString ver); 
     void GNDBVer(int ver); 
     void GNDBRegionVer(QString ver);  //20131023 System info
	 //}added by aettie.ji 20130904 for gracenote version
};

#endif
