/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -p swdlproxy -c SWDLInterface ../xml/swdl.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SWDLPROXY_H_1356072497
#define SWDLPROXY_H_1356072497

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface local.CSWDLAdaptor
 */
class SWDLInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "local.CSWDLAdaptor"; }

public:
    SWDLInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~SWDLInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> SetCheckActivateModule(const QDBusVariant &checkactivatemodule)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(checkactivatemodule);
        return asyncCallWithArgumentList(QLatin1String("SetCheckActivateModule"), argumentList);
    }

    inline QDBusPendingReply<bool> SetEraseMemory(const QDBusVariant &eraseMemory)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(eraseMemory);
        return asyncCallWithArgumentList(QLatin1String("SetEraseMemory"), argumentList);
    }

    inline QDBusPendingReply<bool> SetInitUpdateResult(const QDBusVariant &initUpdate)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(initUpdate);
        return asyncCallWithArgumentList(QLatin1String("SetInitUpdateResult"), argumentList);
    }

    inline QDBusPendingReply<bool> SetPrepareFileTransfer(const QDBusVariant &PrepareFileTransfer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(PrepareFileTransfer);
        return asyncCallWithArgumentList(QLatin1String("SetPrepareFileTransfer"), argumentList);
    }

    inline QDBusPendingReply<bool> SetPrepareFileTransferIBOX(const QDBusVariant &fileInfo)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(fileInfo);
        return asyncCallWithArgumentList(QLatin1String("SetPrepareFileTransferIBOX"), argumentList);
    }

    inline QDBusPendingReply<bool> SetReadDevName(uint swdlid, const QString &deviceName)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(swdlid) << QVariant::fromValue(deviceName);
        return asyncCallWithArgumentList(QLatin1String("SetReadDevName"), argumentList);
    }

    inline QDBusPendingReply<bool> SetReadHWIdentifier(uint swdlid, uint state, const QString &hwidentifier)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(swdlid) << QVariant::fromValue(state) << QVariant::fromValue(hwidentifier);
        return asyncCallWithArgumentList(QLatin1String("SetReadHWIdentifier"), argumentList);
    }

    inline QDBusPendingReply<bool> SetReadHWVersion(uint swdlid, const QString &hwversion)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(swdlid) << QVariant::fromValue(hwversion);
        return asyncCallWithArgumentList(QLatin1String("SetReadHWVersion"), argumentList);
    }

    inline QDBusPendingReply<bool> SetReadModuleVersion(uint swdlid, const QDBusVariant &moduleversion)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(swdlid) << QVariant::fromValue(moduleversion);
        return asyncCallWithArgumentList(QLatin1String("SetReadModuleVersion"), argumentList);
    }

    inline QDBusPendingReply<bool> SetReadNumberofModule(uint swdlid, const QByteArray &modulevalue)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(swdlid) << QVariant::fromValue(modulevalue);
        return asyncCallWithArgumentList(QLatin1String("SetReadNumberofModule"), argumentList);
    }

    inline QDBusPendingReply<bool> SetReprogrammingMode(const QDBusVariant &reprogrammingmode)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(reprogrammingmode);
        return asyncCallWithArgumentList(QLatin1String("SetReprogrammingMode"), argumentList);
    }

    inline QDBusPendingReply<bool> SetRequestDownload(const QDBusVariant &requestdownload)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(requestdownload);
        return asyncCallWithArgumentList(QLatin1String("SetRequestDownload"), argumentList);
    }

    inline QDBusPendingReply<bool> SetRequestTransferExit(const QDBusVariant &requesttransferexit)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(requesttransferexit);
        return asyncCallWithArgumentList(QLatin1String("SetRequestTransferExit"), argumentList);
    }

    inline QDBusPendingReply<bool> SetSWDLProgressInfo(uint swdlOpMode, uint swdlProgress)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(swdlOpMode) << QVariant::fromValue(swdlProgress);
        return asyncCallWithArgumentList(QLatin1String("SetSWDLProgressInfo"), argumentList);
    }

    inline QDBusPendingReply<bool> SetTransferDataAMS(const QDBusVariant &transferdataCMS)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(transferdataCMS);
        return asyncCallWithArgumentList(QLatin1String("SetTransferDataAMS"), argumentList);
    }

    inline QDBusPendingReply<bool> SetTransferDataCMS(const QDBusVariant &transferdataAMS)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(transferdataAMS);
        return asyncCallWithArgumentList(QLatin1String("SetTransferDataCMS"), argumentList);
    }

    inline QDBusPendingReply<bool> SetUpdateProgressingInfo(uint updateStatus)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(updateStatus);
        return asyncCallWithArgumentList(QLatin1String("SetUpdateProgressingInfo"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void CheckActivateModule(const QDBusVariant &checkactivatemodule);
    void EraseMemory(const QDBusVariant &eraseMemory);
    void InitUpdateResult(const QDBusVariant &initUpdate);
    void PrepareFileTransfer(const QDBusVariant &PrepareFileTransfer);
    void ReadDevName(uint swdlid, const QString &deviceName);
    void ReadHWIdentifier(uint swdlid, const QString &hwidentifier);
    void ReadHWVersion(uint swdlid, const QString &hwversion);
    void ReadModuleVersion(uint swdlid, const QDBusVariant &moduleversion);
    void ReadNumberofModule(uint swdlid, const QByteArray &modulevalue);
    void ReprogrammingMode(const QDBusVariant &reprogrammingmode);
    void RequestDownload(const QDBusVariant &requestdownload);
    void RequestTransferExit(const QDBusVariant &requesttransferexit);
    void SWDLProgressInfo(uint swdlid, uint swdlOpMode, uint swdlProgress);
    void TransferDataAMS(const QDBusVariant &transferdataCMS);
    void TransferDataCMS(const QDBusVariant &transferdataAMS);
    void UpdateProgressingInfoStatus(uint swdlid, uint updateStatus);
    void iBoxSWDLFBlockVisible(const bool); //jwyang
};

namespace local {
  typedef ::SWDLInterface CSWDLAdaptor;
}
#endif
